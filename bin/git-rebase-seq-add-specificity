#!/usr/bin/env bash

set -euo pipefail
source "$(dirname $0)"/lib/specificity.sh

#════════════════════════════════════════════════════════════════════════════════════════════════════

format_pick_line() {
  local line=$1
  if [[ $line =~ ^pick\ ([0-9a-f]+) ]]; then
    local rev=${BASH_REMATCH[1]}
  else
    echo >&2 "pick command not in expected format!"
    exit 1
  fi

  local specificity=$(git-get-commit-specificity $rev)

  # Escape slashes and special characters if needed
  local escaped=$(printf '%s\n' "$specificity" | sed 's/[&/\]/\\&/g')
  echo "$line" | sed "s/%N/$escaped/"
}

#════════════════════════════════════════════════════════════════════════════════════════════════════

rebase_seq__set_instructionFormat_to_include_notes

todo_file="$1"
new_file="$(mktemp)"
cp "$new_file" "$todo_file.orig"

while IFS= read -r line; do
  case "$line" in
    # TODO: make it work for reset lines too
    pick*)
      format_pick_line "$line"
      ;;
    *)
      echo "$line"
      ;;
  esac
done <"$todo_file" >"$new_file"

# When we get to the end
{
  rebase_exec__restore_instructionFormat
} >>"$new_file"

mv "$new_file" "$todo_file"

# Now open the modified to-do list in the real editor for review
editor="${VISUAL:-${EDITOR:-vim}}"
exec "$editor" "$todo_file"
