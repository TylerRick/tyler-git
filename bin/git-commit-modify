#!/bin/bash
# (for pushd, otherwise would use:)
#!/bin/sh

#---------------------------------------------------------------------------------------------------

# Like commit --amend, but lets you easily change things like timestamps
# Unlike commit --amend, preserves commit timestamp by default rather than changing it to timestamp for now
# Unlike commit --amend, doesn't work to edit initial commit (because tries to go back to HEAD~1)

# see /home/tyler/dev/git/git/git rebase--interactive.sh

#-----------------
# Usage:

# git commit-modify   # does a reset --soft HEAD^1 to rewind HEAD and then repeats commit; should result in exactly the same SHA1 as before, as all commit data should be preserved

# GIT_COMMITTER_DATE='1232532483 -0800' git commit-modify

# Overwrite both author and committer date (useful when you are both author and committer):
# git_date='2009-01-21 02:08:05' git commit-modify

# Overwrite both author and committer email (useful when you are both author and committer):
# git_email='you@adifferent.org' git commit-modify

# Note that this only rewrites existing commits, so if you want to cause your next commit to have a date or other attribute other than what it normally would have, you still have to commit it normally first before you can use git-commit-modify.

#-----------------
# To do:
# * allow CL arguments, like --date=<date> -m <message>
# * name: is commit-modify too similar to commit-amend? what else could we use? re-commit? repeat-commit? commit-repeat?
# * create a wrapper for/modify git-commit to also let you use date= for *new* commits
# * publish/RFC on git list

#---------------------------------------------------------------------------------------------------
# Dependencies/lib

pushd "$(git rev-parse --show-cdup)" > /dev/null
git_dir=$(git rev-parse --git-dir)

. "$(git --exec-path)/git-sh-setup"

get_committer_ident_from_commit () {
  script='
  /^committer /{
    s/'\''/'\''\\'\'\''/g
    h
    s/^committer \([^<]*\) <[^>]*> .*$/\1/
    s/'\''/'\''\'\'\''/g
    s/.*/GIT_COMMITTER_NAME='\''&'\''/p

    g
    s/^committer [^<]* <\([^>]*\)> .*$/\1/
    s/'\''/'\''\'\'\''/g
    s/.*/GIT_COMMITTER_EMAIL='\''&'\''/p

    g
    s/^committer [^<]* <[^>]*> \(.*\)$/\1/
    s/'\''/'\''\'\'\''/g
    s/.*/GIT_COMMITTER_DATE='\''&'\''/p

    q
  }
  '
  encoding=$(git config i18n.commitencoding || echo UTF-8)
  #git show -s --pretty=raw --encoding="$encoding" "$1" >&2
  git show -s --pretty=raw --encoding="$encoding" "$1" -- |
  LANG=C LC_ALL=C sed -ne "$script"
}

#---------------------------------------------------------------------------------------------------
# Options

rev=HEAD

preserved_GIT_AUTHOR_NAME="$GIT_AUTHOR_NAME"
preserved_GIT_AUTHOR_EMAIL="$GIT_AUTHOR_EMAIL"
preserved_GIT_AUTHOR_DATE="$GIT_AUTHOR_DATE"
preserved_GIT_COMMITTER_NAME="$GIT_COMMITTER_NAME"
preserved_GIT_COMMITTER_EMAIL="$GIT_COMMITTER_EMAIL"
preserved_GIT_COMMITTER_DATE="$GIT_COMMITTER_DATE"

while test $# != 0
do
	case "$1" in
  # TODO: Split this out to its own stand-alone command?
	--show-info-only)
		show_info_only=1
		;;
	esac
	shift
done

#---------------------------------------------------------------------------------------------------
# Record current (pre-change) commit data

eval "$(get_author_ident_from_commit    $rev)"
eval "$(get_committer_ident_from_commit $rev)"

if test "$show_info_only" = "1" ; then
  echo GIT_AUTHOR_NAME=$GIT_AUTHOR_NAME
  echo GIT_AUTHOR_EMAIL=$GIT_AUTHOR_EMAIL
  echo GIT_AUTHOR_DATE=$GIT_AUTHOR_DATE
  echo GIT_COMMITTER_NAME=$GIT_COMMITTER_NAME
  echo GIT_COMMITTER_EMAIL=$GIT_COMMITTER_EMAIL
  echo GIT_COMMITTER_DATE=$GIT_COMMITTER_DATE
  exit 0
fi

#echo Before:
#echo GIT_AUTHOR_DATE=$GIT_AUTHOR_DATE
#echo GIT_COMMITTER_DATE=$GIT_COMMITTER_DATE

# User-supplied values should overwride pre-existing values
test ! -z "$preserved_GIT_AUTHOR_NAME"     && GIT_AUTHOR_NAME="$preserved_GIT_AUTHOR_NAME"
test ! -z "$preserved_GIT_AUTHOR_EMAIL"    && GIT_AUTHOR_EMAIL="$preserved_GIT_AUTHOR_EMAIL"
test ! -z "$preserved_GIT_AUTHOR_DATE"     && GIT_AUTHOR_DATE="$preserved_GIT_AUTHOR_DATE"
test ! -z "$preserved_GIT_COMMITTER_NAME"  && GIT_COMMITTER_NAME="$preserved_GIT_COMMITTER_NAME"
test ! -z "$preserved_GIT_COMMITTER_EMAIL" && GIT_COMMITTER_EMAIL="$preserved_GIT_COMMITTER_EMAIL"
test ! -z "$preserved_GIT_COMMITTER_DATE"  && GIT_COMMITTER_DATE="$preserved_GIT_COMMITTER_DATE"

test ! -z "$git_email" &&    GIT_AUTHOR_EMAIL="$git_email"
test ! -z "$git_email" && GIT_COMMITTER_EMAIL="$git_email"

test ! -z "$git_date" &&    GIT_AUTHOR_DATE="$git_date"
test ! -z "$git_date" && GIT_COMMITTER_DATE="$git_date"

#echo "After:"
#echo GIT_COMMITTER_NAME=$GIT_COMMITTER_NAME
#echo GIT_AUTHOR_NAME=$GIT_AUTHOR_NAME
#echo GIT_AUTHOR_EMAIL=$GIT_AUTHOR_EMAIL
#echo GIT_AUTHOR_DATE=$GIT_AUTHOR_DATE
#echo GIT_COMMITTER_DATE=$GIT_COMMITTER_DATE

# TODO: file_list=`git list files from commit`
git cat-file commit "$rev" | sed "1,/^$/d" > $git_dir/git-commit-modify-message
#cat .git/git-commit-modify-message

#---------------------------------------------------------------------------------------------------
# Re-commit

failed=f
#set -x

git reset --soft HEAD^1 &>/dev/null || {
  #die "Cannot rewind the HEAD"
  # Actually handle the case where this is the first commit so that it works for that case as
  # well.

  git update-ref -d HEAD
  # Example of how to do it *without* this command:
  # GIT_COMMITTER_DATE='2019-12-10 12:08:02 -0800' git commit --date='2019-12-10 12:08:02 -0800' -m 'Initial commit'
  # Actually it looks like it's even possible without using git update-ref -d HEAD :
  # GIT_COMMITTER_DATE='2019-12-10 12:08:02 -0800' git commit --date='2019-12-10 12:08:02 -0800' --amend
}


GIT_AUTHOR_NAME="$GIT_AUTHOR_NAME"         \
GIT_AUTHOR_EMAIL="$GIT_AUTHOR_EMAIL"       \
GIT_AUTHOR_DATE="$GIT_AUTHOR_DATE"         \
GIT_COMMITTER_NAME="$GIT_COMMITTER_NAME"   \
GIT_COMMITTER_EMAIL="$GIT_COMMITTER_EMAIL" \
GIT_COMMITTER_DATE="$GIT_COMMITTER_DATE"   \
git commit $file_list --quiet --no-verify -F $git_dir/git-commit-modify-message || failed=t

#---------------------------------------------------------------------------------------------------
# Clean up

rm $git_dir/git-commit-modify-message

popd > /dev/null

if test $failed = t ; then
  echo "Detected failure!"
  exit 1
else
  #echo "Success"
  exit 0
fi
