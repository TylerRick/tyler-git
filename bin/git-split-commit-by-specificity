#!/usr/bin/env bash

set -euo pipefail
cd $(git rev-parse --git-dir)/..

# Which commit are we splitting? Default to HEAD.
commit_input=${1:-HEAD}
commit=$(git rev-parse --verify $commit_input)
head_rev=$(  git rev-parse --verify HEAD)
if [[ $head_rev != $commit  ]]; then
  echo >&2 "Error. Can't split unless HEAD ($head_rev) is pointing to the commit you want to edit ($commit_input)"
  exit 1
fi

state_dir=.git/split-commit
if [ -e $state_dir ]; then
  echo >&2 "$state_dir already exists!"
  exit 1
fi

mkdir -p $state_dir
echo $commit > $state_dir/commit

#═══════════════════════════════════════════════════════════════════════════════════════════════════

# 1) Roll back to before this commit, but keep all changes staged
git reset --soft "${commit}^"

# 2) Unstage everything
git reset HEAD .

#═══════════════════════════════════════════════════════════════════════════════════════════════════

# to do: add trap that resets if we hit an error:
# - resets back to commit we were on
# - moves .git/info/exclude back
# and/or:
# - write out our state and to-do to a file like rebase-i does, so that if we get interrupted, we
# can continue and it will know where we left off
#   - among the state to write must be the commit_input, since that is lost as soon as we reset
#   $commit^

#═══════════════════════════════════════════════════════════════════════════════════════════════════
# 3) Stage and commit the common subset
#    (files classified as “common” in this commit)
mapfile -t common_files < <(
  git-diff-tree-specificity --quiet --name-only "$commit" common
)

# Unfortunately, this only stops it from using the global ~/.gitignore file, not the per-repo
# .git/info/exclude file. To ignore that, we'd have to either use git add -f (but then we don't get
# useful error that we _want_ to see if local .gitignore happens to be ignoring it), or temporarily
# move it out of the way.
ignore_local_excludes="-c core.excludesFile=/dev/null"
local_exclude_backup_file=.git/info/exclude.backup.git-split-commit-by-specificity
function disable_local_exclude_file() {
  if [ -f .git/info/exclude ]; then
    if [ -f $local_exclude_backup_file ]; then
      echo >&2 "Can't back up .git/info/exclude — $local_exclude_backup_file already exists!"
      exit 1
    fi
    mv --no-clobber .git/info/exclude $local_exclude_backup_file 
  fi
}
function undo_disable_local_exclude_file() {
  mv --no-clobber $local_exclude_backup_file .git/info/exclude || true
}
disable_local_exclude_file

if (( ${#common_files[@]} )); then
  printf 'Staging common files:\n'
  printf '  %s\n' "${common_files[@]}"
  git $ignore_local_excludes add -- "${common_files[@]}"
else
  echo "No common files to stage."
fi

#═══════════════════════════════════════════════════════════════════════════════════════════════════
# 4) Identify mixed files for manual review

mapfile -t mixed_files < <(
  git-diff-tree-specificity --quiet --name-only "$commit" mixed
)

if (( ${#mixed_files[@]} )); then
  echo
  echo "Please review & stage parts of these mixed files:"
  printf '  %s\n' "${mixed_files[@]}"
  echo

  for file in "${mixed_files[@]}"; do
    # show what our detector thinks is specific
    git-detect-file-specificity "$commit" "$file"

    # loop until user stages file
    while true; do
      read -rp "  [a]dd entire file, [p] add -p, or [e]dit '$file'? " resp
      case "$resp" in
        a|A)
          git add "$file"
          break
          ;;
        p|P)
          git add --intent-to-add "$file"
          git $ignore_local_excludes add -p "$file"
          break
          ;;
        e|E)
          ${VISUAL:-${EDITOR:-vi}} "$file"
          ;;
        *)
          echo "    Invalid option!"
          ;;
      esac
    done
  done
else
  echo "No mixed files to review."
fi

# 5) Commit the common changes
echo
git status
read -rp "Press Enter to commit the common changes… " _
git commit -c "$commit"

#═══════════════════════════════════════════════════════════════════════════════════════════════════

# 6) Stage & commit the remaining (specific) changes
git add -A
echo
git status
read -rp "Press Enter to commit the specific changes… " _
git commit -c "$commit"

#═══════════════════════════════════════════════════════════════════════════════════════════════════

echo
echo "✓ Split $commit into these commits:"
git log-oneline -2

# Clean up
undo_disable_local_exclude_file
rm -rf $state_dir
