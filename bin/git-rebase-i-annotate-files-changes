#!/bin/bash
# See notes in git-rebase-i-annotate-files-changes.txt

set -e

if [ -z "$1" ]; then
  echo >&2 "Usage: $(basename $0) <onto_commit>"
  echo >&2 "Rebases onto <onto_commit>."
  echo >&2 "Generates a file containing the list of commits that will be applied onto <onto_commit> along with information that will be helpful in determining which commits can be safely reordered without any chance of a merge conflict."
  exit 1
fi

export commit=$1; shift

#═══════════════════════════════════════════════════════════════════════════════════════════════════
# TODO: remove dup with git-commit-fixup-rebase
if (( ${#commit} <= 3 )); then  # if length <= 3 chars
  # TODO: use file-relative commit refs described above instead of position args
  echo "Treating $commit as number of commits back to go"
  commit=$(git-n-commits-ago $commit "$@")
else
  commit=$(git-ensure-commit-is-ancestor $commit || exit 1)
fi

#═══════════════════════════════════════════════════════════════════════════════════════════════════
export onto=$commit

cd $(dirname "$(git rev-parse --git-dir)")
# TODO: add an option to use --squash instead of --fixup
#git commit --fixup $onto
#git rebase -i --autosquash $onto^

#═══════════════════════════════════════════════════════════════════════════════════════════════════
export GIT_SEQUENCE_EDITOR="$0-editor_wrapper"

#git-commit-fixup-rebase $onto

git rebase -i --keep-empty -r $onto

