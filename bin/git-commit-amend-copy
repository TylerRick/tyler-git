#!/usr/bin/env bash

set -euo pipefail
trap 'echo "❌ Error at line $LINENO: $BASH_COMMAND"' err

#════════════════════════════════════════════════════════════════════════════════════════════════════

usage() {
  cat - <<End >&2
Usage:
  $(basename "$0") <source-commit>
    Copy some details from other commit

Amends the tip commit, copying from source-commit:
- the author/committer details
- the notes

Use case:

This can be used during a rebase, if you want...

To copy the notes as you go, so that you can be sure they get copied as you go, rather than waiting
until the very end of the rebase and hoping/trusting that you didn't modify a commit in some way
that doesn't end up getting tracked correctly in .git/rebase-merge/rewritten-list, thus preventing
the post-rebase notes copying (notes.rewriteRef) from actually working. Copying as you go is simpler
and more reliable.

Downsides: You have to insert this after every pick line (+ fixups, if any) using --exec or similar,
which makes the rebase command sequence messier.

If it detects this is being run inside a rebase, it will default the source commit to
\$(git-rebase-i-get-copy-source-commit).

Options:
  --fall-back-to-rebase-orig-commit
    If using GIT_COPY_SOURCE_COMMIT_MAP, this permits it to fall back to using
    git-rebase-i-get-orig-commit if it can't find a mapping, rather than exit with an error.

  --copy-notes-from-rebase-orig-commit
    Copy notes from git-rebase-i-get-orig-commit even if using GIT_COPY_SOURCE_COMMIT_MAP for
    git-commit-amend-copy-committer.

Example:
  git rebase -i --exec 'git-commit-amend-copy'

See also: git-commit-amend-copy-committer
End
  exit 64 # EX_USAGE
}

#════════════════════════════════════════════════════════════════════════════════════════════════════
# Parse options

# TODO: make all of these defaults settable from env vars
fall_back_to_rebase_orig_commit=false
copy_notes=true
copy_notes_from_rebase_orig_commit=false
notes_copy_opts="-f"

# TODO: pass other opts through to git-commit-amend-copy-committer
while [[ $# -gt 0 ]]; do
  case "$1" in
    --help | -h)      usage;;
    --fall-back-to-rebase-orig-commit)
      fall_back_to_rebase_orig_commit=true
      shift ;;
    --copy-notes-from-rebase-orig-commit)
      copy_notes_from_rebase_orig_commit=true
      shift ;;
    --no-copy-notes)     
      copy_notes=false
      shift ;;
    --no-force)     
      notes_copy_opts=""
      shift ;;
    --force | -f)     
      notes_copy_opts="-f"
      shift ;;
    -*)               echo "Unknown option $1" >&2; exit 1 ;;
    *) break ;;
  esac
done

# Copy commiter from commiter of other commit

# Duplicated between git-commit-amend-copy git-commit-amend-copy-committer
if [ -z "${1-}" ] && [ -d .git/rebase-merge ]; then
  #git-rebase-i-get-copy-source-commit 2>/dev/null
  source_commit_input=$(
    git-rebase-i-get-copy-source-commit ||
      if $fall_back_to_rebase_orig_commit; then
        echo >&2 "⚠️ Warning: Falling back to git-rebase-i-get-orig-commit"
        git-rebase-i-get-orig-commit
      else
        true
      fi
  )

else
  source_commit_input=${1-}
fi

if [ -z "$source_commit_input" ]; then
  # TODO: add --skip-if-no-input option?
  exit 0
  echo >&2 "Missing <source-commit>!"
  exit 1
fi

#════════════════════════════════════════════════════════════════════════════════════════════════════

source_commit=$(git rev-parse --verify "$source_commit_input"^{commit})
source_short=$(git rev-parse --short $source_commit)

# The commit we are amending, which can only be HEAD
head_short=$(git rev-parse --short HEAD)

#════════════════════════════════════════════════════════════════════════════════════════════════════

if [[ $source_short = $head_short ]]; then
  # No-op
  exit
fi

echo "ℹ️ Copying committer from commit $source_short → $head_short"
#set -x
git-commit-amend-copy-committer $source_commit >/dev/null
{ set +x; } 2>/dev/null

if $copy_notes; then
  if $copy_notes_from_rebase_orig_commit; then
    source_commit_input=$(git-rebase-i-get-orig-commit)
    source_commit=$(git rev-parse --verify "$source_commit_input"^{commit})
    source_short=$(git rev-parse --short $source_commit)
  fi

  head_short=$(git rev-parse --short HEAD)
  echo "ℹ️ Copying notes     from commit $source_short → $head_short"
  #set -x
  git-notes-copy-all "${notes_copy_opts-}" $source_commit $head_short >/dev/null
  { set +x; } 2>/dev/null
fi
