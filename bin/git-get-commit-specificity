#!/bin/bash

set -euo pipefail

source "$(dirname $0)"/lib/specificity.sh

cmd_name=$(basename "$0")
notes_ref=specificity

#═══════════════════════════════════════════════════════════════════════════════════════════════════

function usage() {
  cat - >&2 <<End
Usage: $cmd_name [<commit>]

Examples:

  $cmd_name
  $cmd_name @
  $cmd_name acfd9a6

Options:

  --ensure-present
    Exit with failure if no specificity recorded yet.

  --color
    Colorize the specificity.
End
  exit 1
}

#═══════════════════════════════════════════════════════════════════════════════════════════════════

ensure_present=false
color=false
while [[ $# -gt 0 ]]; do
  case "$1" in
    --help | -h)      usage;;
    --color)          color=true; shift;;
    --ensure-present) ensure_present=true; shift ;;
    -*)               echo "Unknown option $1" >&2; exit 1 ;;
    *) break ;;
  esac
done

commit=${1-HEAD}
commit_short=$(git rev-parse --short --verify "$commit"^{commit})

#═══════════════════════════════════════════════════════════════════════════════════════════════════

# Suppress error if no note exists
specificity=$(git notes --ref=$notes_ref show "$commit" 2>/dev/null || true)

# Warn to stderr if it detects problem
normalize_specificity "$specificity" >/dev/null

if [[ -n "$specificity" ]]; then
  if $color; then
    specificity=$(colorize_specificity "$specificity")
  fi
  echo "$specificity"
elif $ensure_present; then
  echo >&2 "❌ No specificity found for $commit_short!"
  exit 1
else
  : # echo "(unspecified)"
fi

