#!/usr/bin/env bash

set -euo pipefail

#════════════════════════════════════════════════════════════════════════════════════════════════════

usage() {
  cat - <<End >&2
Usage:
  $(basename "$0") <source-commit>
    Copy commiter from commiter of other commit

  $(basename "$0") --from-author [<source-commit>]
    Copy commiter from author of other commit (HEAD by default)

Amends the tip commit, copying from orig-commit:
- the committer (identity (name/email) and date)
- the author    (identity (name/email) and date)

Options:
  --from-author, --reset-committer-to-author, --committer-is-author

    Similar to --committer-date-is-author-date but copies committer name/email as well, not just
    date, from author fields.

Example:
  git rebase -i --exec 'git-commit-amend-copy-committer \$(git-rebase-i-get-copy-source-commit)'

Use case:

  This can be used during a rebase, for example, since a rebase will by default set the committer name
  to you and the committer date to now. It provides --committer-date-is-author-date if you want to
  reset commiter date to copy the author date, but it provides no way to _keep_ committer date how it
  was in the original commit.

  TODO: Look into whether we could add GIT_COMMITTER_NAME,etc. to .git/rebase-merge/author-script
  instead to get it to use it for the commit instead of amending the commit after it's been created.

When used as part of rebase

  If it detects that this command is run from the context of a rebase (when using merge backend,
  which is the default for interactive rebase), then if no commit is given, this will assume you are
  using it like this:

    git rebase -i --exec 'git-commit-amend-copy-committer'

  and that you are wanting to keep the committer the same in the rewritten commit as it was in the
  original commit. It will therefore use git-rebase-i-get-copy-source-commit as the default orig-commit.

  When it is finished with the amend, it will also update .git/rebase-merge/rewritten-list with the
  rewritten commit id so that the rebase command can correctly map original commits to new commits.
  This is useful when you have enabled notes.rewriteRef via this config (recommended):

    git config --global notes.rewriteRef "refs/notes/*"

  and you want commits that were attached to the old commits to be copied over to the rewritten commits.

To do:
- Add --no-author to let you opt out and copy only committer — or require opt-in via --reset-author

See also: git-commit-amend-copy, git-commit-cp, git-commit-modify
End
  exit 64 # EX_USAGE
}

#════════════════════════════════════════════════════════════════════════════════════════════════════
# Parse options

from_author=false
fall_back_to_rebase_orig_commit=false
while [[ $# -gt 0 ]]; do
  case "$1" in
    --help | -h)      usage;;
    --from-author | --reset-committer-to-author | --committer-is-author)
      from_author=true; shift ;;
    --fall-back-to-rebase-orig-commit)
      fall_back_to_rebase_orig_commit=true
      shift ;;
    -*)               echo "Unknown option $1" >&2; exit 1 ;;
    *) break ;;
  esac
done

if $from_author; then
  # Copy commiter from author of other commit (HEAD by default)
  source_commit_input=${1:-HEAD}
else
  # Copy commiter from commiter of other commit

  # Duplicated between git-commit-amend-copy git-commit-amend-copy-committer
  if [ -z "${1-}" ] && [ -d .git/rebase-merge ]; then
    #source_commit_input=$(git-rebase-i-get-copy-source-commit)

    # The rebase-local orig commit
    rebase_orig_commit=$(git-rebase-i-get-orig-commit)

    source_commit_input=$(
      git-rebase-i-get-copy-source-commit ||
        if $fall_back_to_rebase_orig_commit; then
          echo >&2 "⚠️ Warning: Falling back to git-rebase-i-get-orig-commit"
          git-rebase-i-get-orig-commit
        else
          true
        fi
    )
  else
    source_commit_input=${1-}
  fi
  amend_opts="--reset-author"
fi

if [ -z "$source_commit_input" ]; then
  # TODO: add --skip-if-no-input option?
  #exit 0
  echo >&2 "Missing <source-commit>!"
  exit 1
fi

#════════════════════════════════════════════════════════════════════════════════════════════════════

source_commit=$(git rev-parse --verify "$source_commit_input"^{commit})

#════════════════════════════════════════════════════════════════════════════════════════════════════

if $from_author; then
  orig_vars="$(git-commit-metadata-vars $source_commit)"
  vars=$(echo "$orig_vars" | grep -v GIT_COMMITTER | sed 's/GIT_AUTHOR/GIT_COMMITTER/')
  eval "$vars"
else
  eval "$(git-commit-metadata-vars $source_commit)"
fi

#echo "⚙️  Amending HEAD ($(git name-rev-prefer-branch @)) …"

# Add a --verbose or similar option to inspect which vars are actually set/used in this process.
#env | grep GIT_ | sort

# If amend_opts could contain opts with spaces: eval "git commit --allow-empty --amend --no-edit --no-verify ${amend_opts:+$amend_opts}"
# git commit --allow-empty --amend --no-edit --no-verify "${amend_opts:+$amend_opts}"
git commit --allow-empty --amend --no-edit --no-verify "${amend_opts:---}"

if [ -n "${rebase_orig_commit-}" ]; then
  new_commit=$(git rev-parse HEAD)
  #git-rebase-i-update-orig-commit --verbose ...
  git-rebase-i-update-orig-commit $rebase_orig_commit $new_commit
fi
