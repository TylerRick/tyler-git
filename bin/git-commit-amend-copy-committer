#!/usr/bin/env bash

set -euo pipefail

#════════════════════════════════════════════════════════════════════════════════════════════════════

usage() {
  cat - <<End >&2
Usage: $(basename "$0") <orig-commit>

Amends the tip commit, copying from orig-commit:
- the committer (name, email, and date)
- the author (name, email, and date)

Use case:

This can be used during a rebase, for example, since a rebase will by default set the committer name
to you and the committer date to now. It provides --committer-date-is-author-date if you want to
reset commiter date to copy the author date, but it provides no way to _keep_ committer date how it
was in the original commit.

Example:
  git rebase -i --exec 'git-commit-amend-copy-committer \$(git-rebase-i-get-orig-commit)'

If it detects that this command is run from the context of an interactive rebase, then this command
will also update .git/rebase-merge/rewritten-list with the rewritten commit id. This is useful when
you have enabled notes.rewriteRef via this config (recommended):

  git config --global notes.rewriteRef "refs/notes/*"

To do:
- Add --no-author to let you opt out and copy only committer — or require opt-in via --reset-author

See also: git-commit-cp, git-commit-modify
End
  exit
}

if [ -z "${1-}" ]; then
  usage
fi

commit_input=$1

commit=$(git rev-parse --verify "$commit_input"^{commit})

#════════════════════════════════════════════════════════════════════════════════════════════════════

eval "$(git-commit-metadata-vars $commit)"

# echo "⚙️  Amending HEAD ($(git name-rev-prefer-branch @)) …"
git commit --allow-empty --amend --no-edit --no-verify --reset-author

if [ -f ".git/rebase-merge/rewritten-list" ]; then
  new_commit=$(git rev-parse HEAD)
  git-rebase-i-update-orig-commit $commit $new_commit
fi
