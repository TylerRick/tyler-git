#!/usr/bin/env bash

set -euo pipefail

#════════════════════════════════════════════════════════════════════════════════════════════════════

usage() {
  cat - <<End >&2
Usage:
  $(basename "$0") <orig-commit>
    Copy commiter from commiter of other commit

  $(basename "$0") --from-author
    Copy commiter from author of other commit (HEAD by default)

Amends the tip commit, copying from orig-commit:
- the committer (name, email, and date)
- the author (name, email, and date)

Use case:

This can be used during a rebase, for example, since a rebase will by default set the committer name
to you and the committer date to now. It provides --committer-date-is-author-date if you want to
reset commiter date to copy the author date, but it provides no way to _keep_ committer date how it
was in the original commit.

Example:
  git rebase -i --exec 'git-commit-amend-copy-committer \$(git-rebase-i-get-orig-commit)'

When used as part of rebase

  If it detects that this command is run from the context of a rebase (when using merge backend,
  which is the default for interactive rebase), then if no commit is given, this will assume you are
  using it like this:

    git rebase -i --exec 'git-commit-amend-copy-committer'

  and that you are wanting to keep the committer the same in the rewritten commit as it was in the
  original commit. It will therefore use git-rebase-i-get-orig-commit as the default orig-commit.

  When it is finished with the amend, it will also update .git/rebase-merge/rewritten-list with the
  rewritten commit id so that the rebase command can correctly map original commits to new commits.
  This is useful when you have enabled notes.rewriteRef via this config (recommended):

    git config --global notes.rewriteRef "refs/notes/*"

  and you want commits that were attached to the old commits to be copied over to the rewritten commits.

To do:
- Add --no-author to let you opt out and copy only committer — or require opt-in via --reset-author

See also: git-commit-cp, git-commit-modify
End
  exit 64 # EX_USAGE
}

from_author=false
while [[ $# -gt 0 ]]; do
  case "$1" in
    --help | -h)      usage;;
    --from-author)    from_author=true; shift ;;
    -*)               echo "Unknown option $1" >&2; exit 1 ;;
    *) break ;;
  esac
done

if $from_author; then
  # Copy commiter from author of other commit (HEAD by default)
  commit_input=${1:-HEAD}
else
  # Copy commiter from commiter of other commit

  if [ -d .git/rebase-merge ]; then
    commit_input=$(git-rebase-i-get-orig-commit)
  else
    commit_input=${1-}
  fi
  amend_ops="--reset-author"
fi

if [ -z "$commit_input" ]; then
  usage
fi

commit=$(git rev-parse --verify "$commit_input"^{commit})

if [ -d .git/rebase-merge ]; then
  rebase_orig_commit=$(git-rebase-i-get-orig-commit)
fi

#════════════════════════════════════════════════════════════════════════════════════════════════════

if $from_author; then
  orig_vars="$(git-commit-metadata-vars $commit)"
  vars=$(echo "$orig_vars" | grep -v GIT_COMMITTER | sed 's/GIT_AUTHOR/GIT_COMMITTER/')
  eval "$vars"
else
  eval "$(git-commit-metadata-vars $commit)"
fi

#echo "⚙️  Amending HEAD ($(git name-rev-prefer-branch @)) …"
#env | grep GIT_ | sort
git commit --allow-empty --amend --no-edit --no-verify "${amend_ops-}"

if [ -n "${rebase_orig_commit-}" ]; then
  new_commit=$(git rev-parse HEAD)
  git-rebase-i-update-orig-commit --verbose $rebase_orig_commit $new_commit
fi
