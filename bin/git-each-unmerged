#!/usr/bin/env ruby
#-------------------------------------------------------------------------------
# An alternative to git mergetool, this will simply open up each unmerged file in your favorite editor rather than opening them in a 3-way diff program.
# (Because the <<<<<< blocks usually provide enough information to solve a merge and sometimes having the 3-way diff is actually more confusing/distracting...)

# TODO: Would it be possible/better to simply use git mergetool and pass in a simple wrapper script that ignores the extra arguments and simply opens the single file?

#-------------------------------------------------------------------------------

require File.dirname(__FILE__) + '/../lib/handle_backup_and_add_for_user_manually_resolving_conflict'

require 'rubygems' 
$:.unshift "/home/tyler/dev/git/ruby-git/lib"
require 'git'      # requires my changes to ruby-git, (git.status.untracked)
require 'colored'
require 'pathname'
require 'facets/blank'
require 'quality_extensions/pathname'

#-------------------------------------------------------------------------------

@repo_root = `git base-dir`.chomp
@cdup = `git rev-parse --show-cdup`.chomp
def relative_to_wd(path)
  @cdup.blank? ? path : File.join(@cdup, path)
end
@git = Git.open(@repo_root)
@lines_preview_to_show = 50

@editor = ENV['VISUAL'] || ENV['EDITOR'] || raise('VISUAL not set')
if @editor =~ %r(/vim)
  @editor += %( -c ':let @/ = "<<<<<<<\\\\|>>>>>>>\\\\|======="')
end
puts "Using editor '#{@editor}'".blue

begin
  show_full = false

  @git.status.unmerged.each do |filename|

    path = relative_to_wd(filename)
    path = Pathname.new(path)
    backup_path = path.add_suffix('.backup_for_git-each-unmerged')

    handle_backup_and_add_for_user_manually_resolving_conflict(path, backup_path) do
      command = "#{@editor} #{path}"
      print path.to_s.green + ' [Enter] > '.cyan
      response = STDIN.gets
      p response

      if response = "\n"
        system command
      end
    end

  end

rescue Interrupt
  puts
end

