#!/usr/bin/ruby

def usage
  puts "Usage: #{$0} [--save|--overwrite] <path>"
  puts "   or: #{$0} [--save|--overwrite] <commit>:<path>"
  puts "cat a file from a certain rev (HEAD assumed if none supplied)"
  # keep in mind that it will page results, so long lines won't be wrapped. If you need long lines to be wrapped (so you can select the output with your mouse and know that you're not going to be getting any truncated lines, you many want to pipe to cat - or
  # use git --no-pager show ...
  exit 1
end

require 'pathname'

#---------------------------------------------------------------------------------------------------
require 'getoptlong'
opts = GetoptLong.new(
    [ '--save',                     GetoptLong::NO_ARGUMENT ],
    [ '--overwrite',                GetoptLong::NO_ARGUMENT ],
    [ '--quiet', '-q',              GetoptLong::NO_ARGUMENT ]
)
opts.each do | opt, arg |
  case opt
  when '--save'
    @save = true
  when '--overwrite'
    @overwrite = true
  when '--quiet', '-q'
    @quiet = true
  end
end

if ARGV.size < 1
  usage
end

if ARGV[0] =~ /([^:]+):(.*)/
  revision = $1
  path = $2
else
  revision = 'HEAD'
  path = ARGV[0]
end

#---------------------------------------------------------------------------------------------------

path_for_git_show = `git-absolute-path #{path} 2>/dev/null`.chomp
if !$?.success?
  # In case, for example, the file has been deleted and doesn't exist in current [index]
  path_for_git_show = path
end

if @save
  extension = Pathname.new(path).extname    # Retain the extension so that editors (vim), etc. that look at the extension for syntax highlighting, etc. won't be confused
  if @overwrite
    save_as = path
  else
    save_as="#{path}.#{revision}#{extension}"
  end

  command = "git-show #{revision}:#{path_for_git_show} > #{save_as}"
else
  command = "git-show #{revision}:#{path_for_git_show}"
end

puts   command unless @quiet
system command

#---------------------------------------------------------------------------------------------------
# Original bash function version:
#
#function git-cat()      { git-show HEAD:$1 
#}
#function git-cat-prev() { git-show HEAD~1:$1 
#}
#
#function ext () { echo ${1##*.} ; }
#function git-cat-save()      { 
#  revision=${2:-HEAD}
#  saved_as="$1.$revision.$(ext $1)"
#  git-show $revision:$1   > $saved_as
#  echo "Saved as $saved_as"
#}
#function git-cat-prev-save() { 
#  saved_as="$1.head-1.$(ext $1)"
#  git-show HEAD~1:$1 > $saved_as
#  echo "Saved as $saved_as"
#}
