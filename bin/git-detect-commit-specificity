#!/usr/bin/env bash

# Usage: git-detect-commit-specificity [commit]

set -euo pipefail

source "$(dirname $0)"/lib/colors.sh
source "$(dirname $0)"/lib/specificity.sh

#═══════════════════════════════════════════════════════════════════════════════════════════════════

split=false
detect=true
act=true
while [[ $# -gt 0 ]]; do
  case "$1" in
    --help | -h)      echo "Usage: $(basename "$0") [--no-act] [<commit>]" >&2; exit 0 ;;  
    --no-detect | -D) detect=false; shift ;;  
    --no-act | -n)    act=false; shift ;;  
    --split)          split=true; shift ;;  
    -*)               echo "Unknown option $1" >&2; exit 1 ;;  
    *) break ;;  
  esac
done

commit=${1:-HEAD}

#═══════════════════════════════════════════════════════════════════════════════════════════════════

source "$(dirname $0)"/lib/colors.sh

# 1) For each path in the commit, detect & record; then report the specificity for each file
if [[ "$detect" = true ]]; then
  git-diff-tree-specificity --detect $commit
fi

# 2) classify commit
mapfile -t specs < <(git-diff-tree-specificity --quiet "$commit" | awk '{print $NF}' | sort -u)
echo "Files have these specificity values: ${specs[@]}"
count=${#specs[@]}
echo count=$count
if (( count == 0 )); then
  _red "Could not detect any common or specific files. (Is this an empty commit?)"
  if [[ $act = true ]]; then
    #git log --color --stat --graph -3
    git log-oneline -30
    read -rp "${cyan}Manually classify commit: [c]ommon, [m]mixed, or [s]pecific?${reset} " response
    specificity=$(normalize_specificity "$response")
  else
    exit
  fi
elif (( count == 1 )); then
  specificity=${specs[0]}
else
  specificity=mixed
fi
_cyan "=> Commit $commit overall specificity: ${bold}$specificity${reset}"

# 3) record & split if needed
if [[ $act = true ]]; then
  git-set-commit-specificity "$specificity" "$commit"
  if [[ $split = true ]]; then
    if [[ "$specificity" == mixed ]]; then
      git-split-commit-by-specificity
    else
      echo "No split needed"
    fi
  fi
fi
