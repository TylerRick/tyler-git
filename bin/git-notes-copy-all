#!/bin/bash

set -euo pipefail

print_usage() {
  cat <<End >&2
Usage:
  $(basename "$0") <old-commit> <new-commit>
    - Copy notes from <old-commit> to <new-commit> for all refs under refs/notes/*

  $(basename "$0") --stdin
    - Read old<space>new commit pairs from stdin (one per line), stripping comments ("#...")

Options:
  --force, -f
      When adding notes to an object that already has notes, overwrite the existing notes (instead of skipping).

  --refs <glob1:glob2:...>
      Limit refs to those matching the given colon-separated globs (like GIT_NOTES_REWRITE_REF)

Future enhancement ideas:
  - Use notes merge instead of copy and allow passing merge strategy
End
  exit 1
}

#════════════════════════════════════════════════════════════════════════════════════════════════════

notes_copy_opts=""
refs_globs=()
use_stdin=false
old_commit=""
new_commit=""
failed_count=0

# Parse args
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    --force|-f)
      notes_copy_opts='-f'
      shift
      ;;
    --refs)
      [[ $# -lt 2 ]] && print_usage
      IFS=':' read -r -a refs_globs <<< "$2"
      shift 2
      ;;
    --stdin)
      use_stdin=true
      shift
      ;;
    -*)
      echo "Unknown option: $1" >&2
      print_usage
      ;;
    *)
      if ! $use_stdin; then
        if [[ -z "$old_commit" ]]; then
          old_commit="$1"
        elif [[ -z "$new_commit" ]]; then
          new_commit="$1"
        else
          echo "Too many arguments" >&2
          print_usage
        fi
        shift
      else
        echo "Positional arguments not allowed with --stdin" >&2
        print_usage
      fi
      ;;
  esac
done

if ! $use_stdin; then
  if [[ -z "$old_commit" || -z "$new_commit" ]]; then
    print_usage
  fi
fi

# Collect matching refs
all_refs=$(git for-each-ref --format='%(refname)' refs/notes/)
matching_refs=()
for ref in $all_refs; do
  if [[ ${#refs_globs[@]} -eq 0 ]]; then
    matching_refs+=("$ref")
  else
    for glob in "${refs_globs[@]}"; do
      if [[ "$ref" == $glob ]]; then
        matching_refs+=("$ref")
        break
      fi
    done
  fi
done

if [[ ${#matching_refs[@]} -eq 0 ]]; then
  echo "No matching refs found under refs/notes/*"
  exit 0
fi

# Function to copy and report notes for one commit pair
copy_notes() {
  local old="$1" new="$2"
  local old_short new_short any_copied=false note
  old_short=$(git rev-parse --short "$old")
  new_short=$(git rev-parse --short "$new")

  for ref in "${matching_refs[@]}"; do
    if git notes --ref="$ref" show "$old" > /dev/null 2>&1; then
      if git notes --ref="$ref" copy ${notes_copy_opts:-} "$old" "$new" 2>/dev/null; then
        if ! $any_copied; then
          echo "📤 Copied notes from commit $old_short -> $new_short:"
          any_copied=true
        fi
        note=$(git notes --ref="$ref" show "$new" 2>/dev/null || true)
        # Multi-line?
        if [[ "$note" == *$'\n'* ]]; then
          echo "─── $ref ───"
          echo "$note"
          echo
        else
          echo "  • $ref: $note"
        fi
      else
        ((failed_count++))
      fi
    fi
  done

  if ! $any_copied; then
    echo "ℹ️  No notes found to copy for commit $old_short"
  fi
}

# Main: single or stdin
if $use_stdin; then
  while IFS= read -r line; do
    # strip comments and whitespace
    line="${line%%#*}"
    if [[ -z "${line//[[:space:]]/}" ]]; then
      continue
    fi
    # read old and new
    read -r old_commit new_commit <<< "$line"
    [[ -z "$new_commit" ]] && continue

    copy_notes "$old_commit" "$new_commit"
  done
else
  copy_notes "$old_commit" "$new_commit"
fi

# Report failed count
if (( failed_count > 0 )); then
  echo "⚠️  $failed_count notes were not copied because they already exist; use -f to force overwrite."
fi

