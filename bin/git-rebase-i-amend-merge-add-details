#!/usr/bin/env bash

set -euo pipefail

#════════════════════════════════════════════════════════════════════════════════════════════════════

usage() {
  cat - <<End >&2
Usage: $(basename "$0")

Replaces the message of the current merge commit (HEAD) with a detailed summary of merged commits

Options:
  --copy-dates (the default, currently)

    If --copy-dates is provided, then it additionally copies author/committer date from parent2
    (the tip of the merged-in branch).

    The goal is for the rewritten history to appear _as if_ this merge took place back then, soon
    after the marged-in topic branch was pushed up. Without this, it would create an obvious
    anachronism in the timeline: super-recent merge requests appearing back amidst really-old
    regular commits. The best approximation we can have for "soon after the marged-in topic branch
    was pushed up", without adding an arbitrary + offset, is "immediately after" = the _same_
    date/time as the last (tip) commit in the merged-in branch.

    We leave the author/committer of this merge commit the way it was, because the author/committer
    of the merge is _not_ necessarily the author of the commits being merged in, and it would be
    misleading to show that someone created the merge other than the person who actually created the
    merge.

  --no-copy-dates
    Turn off --copy-dates
End
  exit
}

#═══════════════════════════════════════════════════════════════════════════════════════════════════

copy_dates=true
while [[ $# -gt 0 ]]; do
  case "$1" in
    --help | -h)         usage;;
    --copy-dates)        copy_dates=true; shift ;;
    --no-copy-dates)     copy_dates=false; shift ;;
    -*)                  echo "Unknown option $1" >&2; exit 1 ;;
    *) break ;;
  esac
done

#═══════════════════════════════════════════════════════════════════════════════════════════════════

if ! git-is-merge-commit HEAD; then
  echo "❌ HEAD is not a merge commit"
  exit 1
fi

# Extract parent commits of the current merge
# (assuming from_parent is the branch being merged in)
into_parent=$(git rev-parse HEAD^1)
from_parent=$(git rev-parse HEAD^2) # will fail if not a merge

# Detect merged commits: those in from_parent that are not in into_parent
merged_commits=$(git log --format='%s' --no-merges "${into_parent}..${from_parent}")

# Get branch names for each parent, if we can (best effort)
branch1=$(git-name-rev-prefer-branch "$into_parent" 2>/dev/null | sed 's#rewritten/##' || echo "$into_parent")
branch2=$(git-name-rev-prefer-branch "$from_parent" 2>/dev/null | sed 's#rewritten/##' || echo "$from_parent")

# When rebasing over a merge with --rebase-merges, generates some ugly default label refs,
# apparently based on previous merge commit titles, such as
# N-Merge-common-into-main-2025-05-19-Tyler-Rick-.
# (See them all with: git for-each-ref --format='%(refname)' refs/rewritten/)
# Let's fix it and try to change it back to the nice simple branch name that it had previously, such
# as common in this example.
branch2=$(echo "$branch2" | sed -E 's|.*/?Merge-||; s|-into.*||')
# from-common-2024-11-19-Tyler-Rick-:
branch2=$(echo "$branch2" | sed -E 's|.*/?from-||' | sed -E 's|-[0-9].*||')
# Just to be safe, for now:
branch2=common

#═══════════════════════════════════════════════════════════════════════════════════════════════════

# Format commit summary
if [ -n "$merged_commits" ]; then
  #summary=$(echo "$merged_commits" | sed 's/^/  /')
  summary=$(echo "$merged_commits" | sed 's/^/- /')
else
  summary="  (No non-merge commits)"
fi

# Construct the new commit message
# Other variations to consider:
#   Merge branch '$branch2' into $branch1
# but in the context of a rebase, $branch1 may not even have a useful ref/label attached, so it
# might just be set to a rev like ae93458.

#message=$(cat <<End
#Merge from '$branch2':
#
#* $branch2:
#$summary
#End

message=$(cat <<End
Merge from $branch2:
$summary
End
)

if $copy_dates; then
  orig_vars="$(git-commit-metadata-vars $from_parent)"
  vars=$(echo "$orig_vars" | grep DATE)
  eval "$vars"
  #env | grep GIT_ | sort
fi

# Amend the commit
git commit --allow-empty --amend --no-edit --no-verify --reset-author -m "$message"
