#!/bin/bash

set -euo pipefail
git_dir=$(git rev-parse --git-dir)

source "$(dirname $0)"/lib/colors.sh
source "$(dirname $0)"/lib/specificity.sh

# Returns the effective rewrite mode
notes_rewrite_mode() {
  echo "${GIT_NOTES_REWRITE_MODE:-$(git config --get notes.rewriteMode || echo concatenate)}"
}

#═══════════════════════════════════════════════════════════════════════════════════════════════════

cmd_name=$(basename "$0")
notes_ref=refs/notes/specificity

function usage() {
  cat - >&2 <<End
Usage: $cmd_name [<commit>] <specificity>

Examples:

  $cmd_name @ specific
  # Clear recorded value
  $cmd_name @ ''
  $cmd_name acfd9a6 common
  $cmd_name s
  $cmd_name c

End
  exit
}

case "${1:-}" in
  -h|--help)
    usage
    ;;
esac

# commit is optional
if (( "$#" == 2 )); then
  commit=$1
  specificity=$2
elif (( "$#" == 1 )); then
  commit=@
  specificity=$1
else
  usage
fi

#═══════════════════════════════════════════════════════════════════════════════════════════════════

specificity=$(normalize_specificity "$specificity")

recorded=$(git-get-commit-specificity $commit)

git notes --ref=$notes_ref add -f -m "$specificity" "$commit" 2>/dev/null
_cyan "Marked ${bold}$commit${reset}${cyan} as ${bold}$specificity${reset} (was: $recorded)"

if [ -d $git_dir/rebase-merge ] && [ -n "$(git config notes.rewriteRef)" ]; then
  if  [[ "$(notes_rewrite_mode)" == "overwrite" ]]; then
    # Git’s internal logic for notes copy --for-rewrite=rebase does not handle identity rewrites (unchanged commits) safely under overwrite mode.
    # Even if a note exists and even if the commit is untouched, the mere presence of the commit ID in the rewrite flow is enough to potentially erase the note, whether or not it's explicitly mapped in rewritten-list.
    # There is no safe way to rely on Git’s built-in notes.rewriteRef + overwrite behavior during interactive rebase when some commits are rewritten to themselves.
    echo >&2 "⚠️  Warning: git config notes.rewriteMode is $(notes_rewrite_mode). Change this to 'concatenate' to be safe. With 'override' if you do a rebase and some commits remain unchanged (not rewritten), the notes for those commits could become lost!" 
  elif  [[ "$(notes_rewrite_mode)" == "concatenate" ]] && [[ "$specificity" != "$recorded" ]]; then
    # Get it to work more like overwrite mode by deleting the old note to make room for the new one
    # that will get copied by notes.rewriteRef.
    orig_commit=$(git-rebase-i-get-orig-commit)
    if [ -n "${orig_commit-}" ]; then
      echo >&2 "⚠️  Warning: Removing old specifity from original commit so that it won't get concatenated with the new note. If you abort the rebase, you will need to manually restore this:" 
      echo >&2 "git set-commit-specificity $orig_commit $recorded"
      echo "# $(date '+%Y-%m-%d %H:%M:%S')"                        >> .git/removed-specificity-log
      echo     "git set-commit-specificity $orig_commit $recorded" >> .git/removed-specificity-log
      git notes --ref=$notes_ref remove $orig_commit
    fi
  fi
fi

echo "  $(git show-oneline $commit)${reset}"
