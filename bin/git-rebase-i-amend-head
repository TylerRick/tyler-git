#!/usr/bin/env bash

set -euo pipefail
trap 'echo "❌ Error at line $LINENO: $BASH_COMMAND"' err
git_dir=$(git rev-parse --git-dir)

#════════════════════════════════════════════════════════════════════════════════════════════════════

usage() {
  cat - <<End >&2
Usage: $(basename "$0") [<source-commit>]

Copy some details from other commit

Amends the tip commit during an interactive rebase.

This simply passes control to a more specific command depending on what HEAD is. This is convenient
for use with --exec so that you can simply add the same "fix" command after every pick or merge and
it will just "do the right thing".

If HEAD is a merge commit, this executes git-rebase-i-amend-merge-add-details.

Otherwise, this executes git-commit-amend-copy.

Example:
  git rebase -i --exec 'git-rebase-i-amend-head'

See also: git-rebase-i-amend-merge-add-details, git-commit-amend-copy
End
  exit 64 # EX_USAGE
}

#════════════════════════════════════════════════════════════════════════════════════════════════════
# Parse args and apply defaults

copy_notes=true

while [[ $# -gt 0 ]]; do
  case "$1" in
    --help | -h)      usage;;
    --copy-notes)     
      copy_notes=true
      shift ;;
    --no-copy-notes)     
      copy_notes=false
      shift ;;
    -*)               echo "Unknown option $1" >&2; exit 1 ;;
    *) break ;;
  esac
done

if [ -z "${1-}" ] && [ -d $git_dir/rebase-merge ]; then
  # This is expected to fail for custom merge commands that don't have a -C <orig_commit> line, for example
  # It is required for git-rebase-i-amend-merge-reapply-orig-changes, but not for git-rebase-i-amend-merge-add-details
  source_commit_input=$(git-rebase-i-get-copy-source-commit 2>/dev/null || true)
else
  source_commit_input=${1-}
fi

#════════════════════════════════════════════════════════════════════════════════════════════════════

if [ -n "${source_commit_input-}" ]; then
  source_commit=$(git rev-parse --verify "$source_commit_input"^{commit})
  source_short=$(git rev-parse --short $source_commit)
fi

# The commit we are amending, which can only be HEAD
head=$(git rev-parse HEAD)
head_short=$(git rev-parse --short HEAD)

#════════════════════════════════════════════════════════════════════════════════════════════════════

if git-is-merge-commit $head; then
  # TODO: Make this an option user can opt in to? It may be useful when you're doing a rebase that
  # _should_ produce identical-to-original merge commits at each step. But it's emphatically _not_
  # what you want if you're doing a rebase specifically for the purpose of amending one of those
  # merge commits.
  # It may not be safe to make it the default. I found that this silently reverted the changes I'd manually
  # made to the merge commit (I specifically did a rebase/edit to amend it) because it silently
  # checked out the other version and then silently committed them in the commit --amend --no-edit
  # that git-rebase-i-amend-merge-add-details does. So if we add this back, we need to make it very
  # noisy about what changes it is adding, and possibly even prompt the user if they want to accept
  # them if it detects that any changes were made from the existing merge commit.
  if false && [ -n "${source_commit-}" ]; then
    git-rebase-i-amend-merge-reapply-orig-changes $source_commit
    git diff --staged
  fi

  # The adding merge details to message part was only for a certain large-scale rewriting. It may
  # not be needed for every use case. But resetting the committer date (which is the other thing
  # git-rebase-i-amend-merge-add-details) seems like it would be wanted for many/most large-scale
  # rebases!
  # The message rewriting is not needed if rebasing over commits that have _already_ had this
  # treatment and have the message how we want it.  TODO: Make this opt-in (env var? )-- or only if
  # it detects the message is missing the details.
  #git-rebase-i-amend-merge-add-details --no-message
  git-rebase-i-amend-merge-add-details ${source_commit-}
  # We could also just hand off to git-commit-amend-copy if we detect that
  # git-rebase-i-amend-merge-add-details is disabled, so that at least the committer date is fixed...
else
  git-commit-amend-copy $($copy_notes && echo '--copy-notes' || echo '--no-copy-notes') $source_commit
fi
