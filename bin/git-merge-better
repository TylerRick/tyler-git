#!/usr/bin/env ruby
#---------------------------------------------------------------------------------------------------
# TODO:
# When you don't pass in a file: It doesn't pass on the options to git each-unmerged, so options have no effect.
#   So need to pass those options on...
#   Or, instead of calling git each-unmerged on command line, probably better to refactor that out to a lib that is used by each-unmerged and here?
#
# It would be nice if it kept all log files in some history dir somewhere in case you want to revisit later how you resolved something to figure out how you incorrectly resolved it.
# Save the full list of files with conflicts?
# Keep the file_with_conflict in that history dir too.
# Otherwise the only way to get it back again is to create an entire copy of your working tree/repo, reset --hard {the_commit_before_merge}, and do the merge again.
# (But it might be worth making such a backup (automatically but not by default?) anyway, since that would probably be ideal for recovering from a messed up merge.)
# So add an option to rmversions that actually moves to some archive/history dir?
# This would also allow us to view all the context in the same way it was when merge-better was first run. (use the --continue option and probably need to add an option for pulling in the temp files from somewhere else)
# The other problem with that is that it currently depends on MERGE_HEAD being set. Should we save that metadata about the merge in the history file too and then pass it in as options (perhaps with --merge-head 245215) or as a --merge-metadata-file= option? (kind of like rebase -i saves some metadata in .git/rebase-merge/author-script)
#
# Handle the other cases handled by built-in git mergetool:
#Deleted merge conflict for 'app/views/a/a.html.erb':
#  {local}: deleted
#  {remote}: modified
#Use (m)odified or (d)eleted file, or (a)bort? 
#
# ... or just configure mergetool to use this tool.
#
# Use 'ours'/'theirs' names (as used in git checkout --ours) instead of 'mine'/'upstream'
#
# In the case of conflict from stash, git labels it thus:
#<<<<<<< Updated upstream
#upstream
#=======
#stashed
#>>>>>>> Stashed changes
# but the way we're doing things, stashed ends up in the 'upstream(.from_conflicted,etc.)' file, while HEAD is mine
# but I can see why they'd consider HEAD to be upstream, because it will have updated to future versions while the stash stays behind

#---------------------------------------------------------------------------------------------------
# Reference:
# /usr/local/libexec/git-core/git-rebase

#---------------------------------------------------------------------------------------------------

require File.dirname(__FILE__) + '/../lib/handle_backup_and_add_for_user_manually_resolving_conflict'
require File.dirname(__FILE__) + '/../lib/menus'
require 'pathname'
gem 'facets'
require 'facets/file/rewrite'
require 'facets/hash/slice'
require 'facets/hash/except'
require 'facets/kernel/blank'
#require 'facets/class/to_proc'
require 'facets/string/newlines'
gem 'quality_extensions'
require 'quality_extensions/pathname'
gem 'colored'
require 'colored'

#---------------------------------------------------------------------------------------------------

require File.dirname(__FILE__) + '/../lib/terminal_size'
width_for_side_by_side_diffs = $screen_width.to_i #* 2 / 3

#---------------------------------------------------------------------------------------------------
# Parse args

require 'optparse'

@options = {
  #:use => 'from_conflicted'
  #:use => 'all'
  :no_act => false,
  :force => false,
}

def parse_args
  ARGV.options do |opts|
    opts.banner = <<End
Usage: #{File.basename($0)} [options] [file_with_conflict]

An alternative to git mergetool.

Run this command any time you have a merge conflict -- no matter if you're doing git merge, git rebase, or git cherrypick. It will help you look at the attempted merge from a couple different "angles" to help you as you try to resolve the conflict by hand.

Git mergetool (always, as far as I know) tries to show you the merge as a 3-way diff. But I find the 3-way diff hard to look at, confusing, and distracting. 2-way diffs are so much easier to look at. It is nice to see the 3 versions side by side (2 versions + conflicted) -- it's just the diff highlighting that is annoying/distracting. 
I figured that in many cases it would be much easier and quicker to understand the merge by simply looking at a 2-way diff and then, using that (and a list of diffs/commits from each branch being merged) as reference, to resolve the conflict sections in an editor window that *isn't* diffed with anything (or perhaps is diffed against [one of the files produced for the 2-way diff]).

To create the 2-way diffs, you have 2 options:

  'from_conflicted' -- This starts from the partially-merged file with the conflict markers file, strips out conflict versions, saves these as temporary files
                       (mine.from_conflicted and upstream.from_conflicted) and shows you these partially-merged versions side by side

  'actual'          -- This shows the version exactly it existed in their branch and in your branch (using git show).

    Usually, this diff is messier than 'from_conflicted' because it hasn't attempted to merge anything yet.
    So I usually prefer looking primarily at from_conflicted diffs, and only consulting these versions (not necessarily their diff, which is often pretty useless) if I want to double-check how a portion of the file appeared in 'their' version, for example.
    Also, when I see how few differences there are between the from_conflicted versions, and can't believe that that's all that was different, it's sometimes nice to be able to do a sanity check and see the *actual* differences (pre-merge-attempt) between the two versions.

    TODO: how do these versions differ from the LOCAL and REMOTE from git mergetool -t vimdiff?

Because these are saved as temporary files, you feel free to edit them however is useful. For example, if in mine.from_conflicted, you see that a block was indented and surrounded with an if statement, perhaps you might unindent that block, just so the diff highlighting will stop showing it as a difference (since the only difference for those lines is the indenting).
Modifying these temporary files doesn't affect your main [conflicted] file, so you can feel free to make whatever edits you want to them, since they will be thrown away anyway.

If you get tired of looking at the merge from one "angle", you can always switch to a different angle.

I like to start with the upstream.from_conflicted vs. mine.from_conflicted view because
* it's usually the simplest to understand (it's less scary than file_with_conflict)
* and it usually shows you just how *similar* the two versions are, which is encouraging to see.
From here, I usually go next to the diffs to see the context (which commits introduced the changes on either side)

Other views included:
* A log showing which commits introduced the changes on either side (which changes were made to the upstream branch and to your branch)
  * This helps you understand the context of the changes (by reading the patches) and the intention of the author who introduced those commits (by reading the commit messages, you can hopefully understand why the commit was made and whether/how it should be applied to this now [base version])
  * Example use:
    * After merging from_conflicted.mine into file_with_conflict, you may want to scan through upstream.log.diff and mine.log.diff to make sure none of the important changes represented in those logs got accidentally dropped while doing your manual merge.  
    * Or you could start with mine.actual and manually apply all the changes represented in upstream.log.diff.
    * Or you could start with upstream.actual and manually apply all the changes represented in mine.log.diff.
  * For each commit and file in each commit, it adds a command line that you can run to get a side-by-side diff (I set up my Vim so I can press F5 on a line to execute the command on that line)
* ...

If file_with_conflict is omitted, it will loop through all unmerged files using git each-unmerged (which in turn will call git-merge-better on each unmerged file)

It's amazing how needlessly useless file_with_conflict is when the conflict involves lines that differ only (or mostly) in the leading whitespace on those lines. So if you do anything that requires indenting a block of code (such as wrapping it in an if statement), prepare for a merge conflict that is annoying to resolve even though the difference is so minor.
You can specify -b, --ignore-space-change
  Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent.
when doing normal, 2-way diffs, but there is no option that I can find to get git merge to ignore changes in whitespace.
See for example:
  [1] http://git.661346.n2.nabble.com/Merge-rebase-and-whitespace-fixes-td3176489.html
  [2] http://git.661346.n2.nabble.com/git-merge-ignoring-whitespace-td2278058.html
One or the other of the whitespace variations from the two branches would have to win eventually, and which one is better probably can't be determined programmatically, but in my opinion, it would be better to let it just choose one arbitrarily than raising a false alarm about a conflict when there really is none (or at least where the only conflict is the whitespace differences).

Another solution is to "try to "normalize" the whitespace, and perform the merge after that." [2] and [1]:
  One thing I have done in the past when trying to merge two diverged 
  trees was to format each commit in each tree to a common standard. 

  One of the ways in which the trees had diverged was whitespace 
  (non-meaningful) changes, so I used the Eclipse formatter as part of a 
  "git filter-branch" script to make sure that I was ony looking at 
  meaningful changes between the trees at each point. This significantly 
  simplified the process. 
Which is great if you both know how and have the foresight to do so prior to your merge/rebase, but what about those of us who only discover this after they have started the rebase/merge and have invested hours getting to the point they are at in the conflict resolution process? If only one could easily and reliable save all the resolutions you've resolved so far, then go back to the original branches, consistentify them, and then somehow resume where you left off in the merge/rebase...

Another solution would be to just have it format file_with_conflict in a saner way, or providing additional information/views to help you to see the substantive changes easier. But I guess that's where this script comes in...

So the best solution I have at the moment is to use vimdiff to compare the from_conflicted files, making sure set diffopt+=iwhite so that it doesn't highlight whitespace changes.
Then you can see clearly enough whether or not there are any *real* changes and ensure that those make it into your resolved version.
In many cases I find it's easier to just resolve the substantive changes first and then just fix the whitespace as you're doing that -- instead of dealing with the conflict markers in file_with_conflict at all. In other words, the whitespace fixes will come naturally as you apply the real changes -- don't let the sometimes large-looking supposed "conflicts" scare or confuse you.


End

    #opts.on("--use which",            "'all' (default), 'actual', or 'from_conflicted' (see full descriptions above)") {|v| @options[:use] = v }
    opts.on("-o", "--order", "[not implemented] Specify the order of the windows that it opens in vim ")                                      {|v| }

    opts.on("-f", "--force", "Overwrite temporary files that may exist from a previous invocation of this command.") { @options[:force] = true }
    opts.on("-c", "--continue", "--no-overwrite", "--reuse-files", "Don't overwrite temporary files that may exist from a previous invocation of this command. Useful if you made changes to those files that you want to keep and you want to open up the views again after exiting this script.") { @options[:continue] = true }

    opts.on("-n", "--no-act", "Don't create/copy/modify files or open the editor")                                      { @options[:no_act] = true }

    opts.on("-v", "--verbose", "Be more verbose")                                                                       { @options[:verbose] = true }
    opts.on("-h", "--help", "Show this help message.")                                                                  { puts opts; exit }
    opts.parse!
  end
end
parse_args
#puts "@options=#{@options.inspect}"

if ARGV.size == 0
  #ARGV.unshift '--help'
  #parse_args
  exec "VISUAL='git merge-better' git each-unmerged --no-mark-as-resolved"
end

#---------------------------------------------------------------------------------------------------

@file = Pathname.new(`git-absolute-path #{ARGV[0]}`.chomp)
ext = @file.extname
#mtime = @file.mtime

Dir.chdir(File.dirname(`git rev-parse --git-dir`.chomp))
@file.exist? or fail "#{@file} does not exist"

#---------------------------------------------------------------------------------------------------

merge_type = `git-merge-status --type`
if !$?.success? && !@options[:continue]
  #STDERR.puts "No merge in progress and not called with --continue. Aborting."
  #exit 1
end
merge_type = merge_type.chomp.to_sym
#p merge_type

system 'git-merge-status'

if merge_type == :rebase
  upstream = onto = `git rebase-info --onto`.chomp
  mine =     head = `git rebase-info --head`.chomp
  rebase_current_rev = `git rebase-info --stopped-rev`.chomp; $?.success? or fail "Command failed"
  #puts "rebase_current_rev=#{rebase_current_rev.inspect}"

  #system "git rebase-info -p > "
  #rebase_current_commit_info_filename = `git rebase-info -f`.chomp

#elsif merge_type == :cherry_pick
#  fail "cherry_pick case not handled yet"

elsif merge_type == :merge
  upstream   = 'MERGE_HEAD'
  mine       = 'HEAD'

else
  #fail "Unknown merge_type '#{merge_type}'"
  upstream   = nil
  mine       = 'HEAD'
end

if upstream
  #merge_base = `git merge-base MERGE_HEAD HEAD`.chomp
  merge_base = `git merge-base #{upstream} #{mine}`.chomp
  merge_base = `git name-rev --name-only --always --no-undefined #{merge_base}`.chomp
  #merge_head = `git rev-parse MERGE_HEAD`.chomp
end

if @options[:verbose]
  puts "upstream=#{upstream.inspect}"
  puts "mine=#{mine.inspect}"
  puts "merge_base=#{merge_base.inspect}"
end


#---------------------------------------------------------------------------------------------------

@renames = {}
command = "git log -1 -M --summary --diff-filter=R"
output = `#{command}`
output.lines.each do |line|
  if line =~ /^ rename (.*)\{(.*) => (.*)\} \((\d+%)\)\s*$/
    common, old_end, new_end = $1, $2, $3
    old = common + old_end
    new = common + new_end
    puts "Rename detected: old=#{old.inspect} => new=#{new.inspect}"
    @renames[old] = new
  end
end

file_name_as_of = {}
file_name_as_of['upstream'] = @file.to_s
if found_rename = @renames.detect {|k,v| v == @file.to_s}
  old, new = found_rename
  file_name_as_of['upstream'] = old
  puts "file_name_as_of['upstream']=#{file_name_as_of['upstream'].inspect}" if @options[:verbose]
end

file_name_as_of['mine'] = @file.to_s
if found_rename = @renames.detect {|k,v| k == @file.to_s}
  old, new = found_rename
  file_name_as_of['mine'] = new
  puts "file_name_as_of['mine']=#{file_name_as_of['mine'].inspect}" if @options[:verbose]
end

#---------------------------------------------------------------------------------------------------
files = {'actual' => @file}

#---------------------------------------------------------------------------------------------------
# formerly warn_if_exists
def okay_to_write_file?(file)
  exists = file.exist?
  return false if @options[:continue]
  return true  if @options[:force]

  if exists
    STDERR.print "Warning: #{file.to_s.bold}".yellow + " already exists; (use --force next time to overwrite all without prompting) overwrite? ".yellow + 
      "yes".menu_item(:magenta) + ", " +
      "no".menu_item(:green) + ", " +
      "all".menu_item(:red) +
      " > "
    response = STDIN.gets
    if response[0..0].downcase == 'y'
      return true
    elsif response[0..0].downcase == 'a'
      @options[:force] = true
      return true
    else
      return false
    end
  end
  !exists
end

#---------------------------------------------------------------------------------------------------
require File.dirname(__FILE__) + '/../lib/extract_merged_versions_from_conflicted'

# TODO: how do we know?
# differs if doing rebase master vs merge master
# look at strings after <<<<<<<?
#   yes, that will tell us something
#     stash apply: "Stashed changes..."
#     merge:
#     rebase:
# perhaps MERGE_HEAD is missing/different for rebase?

if merge_type == :rebase
  mine_section = :bottom
else
  mine_section = :top
end
  puts %(mine_section=#{(mine_section).inspect})

['mine.from_conflicted', 'upstream.from_conflicted'].each do |suffix|
  files[suffix] = new_file = @file.add_suffix(".#{suffix}#{ext}")
  if !@options[:no_act] and okay_to_write_file?(new_file)
    @file.cp new_file
    File.rewrite new_file do |conflicted_s|
      if suffix =~ /upstream/
        section_to_keep = mine_section == :top ? :bottom : :top
      else
        section_to_keep = mine_section
      end
      SourceFileWithMergeConflicts.new(conflicted_s)[section_to_keep]
    end
  end
end

#---------------------------------------------------------------------------------------------------

# Note: If a file was deleted, one of this git show commands will probably show nothing.
# TODO: we should output that 'the file was deleted' instead

['mine.actual', 'upstream.actual'].each do |suffix|
  new_file = @file.add_suffix(".#{suffix}#{ext}")
  if !@options[:no_act] and okay_to_write_file?(new_file)
    extra_header = ''
    if suffix =~ /upstream/ and upstream
      # for a rebase, we're actually applying 'mine' to HEAD (upstream + all the commits we've already applied), so it would be more useful to show the file as it exists in HEAD
      if merge_type == :rebase
        _upstream = 'HEAD'
        # TODO: not sure if we need to change this file_name_as_of part
        command = "git show #{_upstream}:'#{file_name_as_of['upstream']}' >> '#{new_file}'"
        # TODO: should probably name new_file .HEAD.actual in this case and also create/show the normal .upstream.actual in case they want to go further upstream and compare to the HEAD version...
        extra_header = "# Note: Because this a rebase and this is the version of this file from HEAD, it may have changes from *both* branches (#{upstream} and #{mine})."
      else
        _upstream = upstream
        command = "git show #{_upstream}:'#{file_name_as_of['upstream']}' >> '#{new_file}'"
      end
    elsif suffix =~ /mine/
      #command = "git show        HEAD:'#{file_name_as_of['mine']}' >> '#{new_file}'"
      command = "git show     #{rebase_current_rev || mine}:'#{file_name_as_of['mine']}' >> '#{new_file}'"
    else
      next
    end
    puts command if @options[:verbose]
    new_file.open('w') do |f|
      f.puts command
      f.puts extra_header unless extra_header.blank?
    end
    system command
    files[suffix] = new_file
  end
end

#---------------------------------------------------------------------------------------------------
# upstream.log.diff, mine.log.diff

# TODO: can we do git checkout --theirs?
# or git cat-save commit:file ?
# > git-cat-save -c MERGE_HEAD:app/views/events/show.html.erb
# git show MERGE_HEAD:'app/views/events/show.html.erb' > 'app/views/events/show.html.erb.MERGE_HEAD.erb'

how_many_commits_back = 20

if merge_type == :rebase
  #upstream_from = "#{upstream}~#{how_many_commits_back}"
  # Reachable from the onto (upstream) branch, but *not* from our branch (mine)
  upstream_revs = "^#{mine} #{upstream}"

  # Old before git rebase-info:
 #mine_from     = "#{upstream}"
 ## We don't want to show commits that are in the future relative to the commit we are looking at right now with the rebase
 #mine_up_to    = mine # 'HEAD'  # since we take it one commit at a time

  mine_revs     = "^#{upstream} #{rebase_current_rev}"

  # TODO: It may be surprising to the user in the case of rebase interactive that sometimes the conflict is due to a fixup commit (currently shown at the bottom of mine.log.diff) conflicting with a previous commit in the same file (mine.log.diff)
  # should the fixup commit show up in upstream.log.diff??
else
  if upstream
    upstream_from = "#{merge_base}^"
    upstream_revs = "#{upstream_from}..#{upstream}"
    mine_from     = "#{merge_base}^"
  end

  if mine_from
    mine_revs     = "#{mine_from}..#{mine}"
  else
    reverse = false # because we might have gone too far back, and it would be confusing to show an irrelevant version first
    mine_revs     = "#{mine}~#{how_many_commits_back}..#{mine}"
  end
end

# TODO: can we simply use git-log-mine and git-log-theirs?
# The .diff extension causes the syntax highlighting to be nice in vim.
[['upstream', upstream_revs],
 ['mine',     mine_revs]
].each do |version, revs|
  next if revs.nil?
  # TODO: if reverse...
  # --follow can cause problems but sometimes may be wanted?
  common_opts = '--reverse --no-prefix --no-color'
  # -c (combined) for merge commits? or not? or do it each way? or make it an option?

  opts = "--pretty=format:'%h %ai %an - %s'"
  # TODO: when currently on the commit that does the rename (as opposed to the rename was in a previous commit), file_name_as_of does *not* seem to be detecting the old file name 
  short_command = "git log #{common_opts} #{opts} #{revs} -- #{file_name_as_of[version]}"
  puts short_command if @options[:verbose]

  # Sometimes (such as when changing the indent level), the unified diff/patch is useless and we'd be better off doing side-by-side
  #   Maybe filter the git log output through a filter that, for each commit, gives a pre-formed gld/git-difftool command that you can run (what's command in vim to run a line through the shell?) to get a side-by-side diff.

  #lines_of_context = 10
  lines_of_context = 25
  opts = "-p --unified=#{lines_of_context} --ignore-space-change"
  inline = false
  # Give them 3 options
  git_log_filter_command = "git-log-filter-add-git-difftool-commands  #{' -i' if inline}" +
    " --tool=vimdiff" +
    " --cmd='diff --side-by-side --expand-tabs --width=#{width_for_side_by_side_diffs}'" +
    " --cmd='diff --side-by-side --expand-tabs --width=#{width_for_side_by_side_diffs * 2 / 3}'" +
    " --command='git log -p {{rev}} # Show all changes from this commit, not just changes to {{file}}'" +
    " --command='git log -p {{rev}} -- {{file}}'"
  long_command  = "git log #{common_opts} #{opts} #{revs} -- #{file_name_as_of[version]} #{"| #{git_log_filter_command}" if git_log_filter_command}"
  puts long_command if @options[:verbose]

  files["#{version}.log.diff"] = new_file = @file.add_suffix(".#{version}.log.diff")

  if !@options[:no_act] and okay_to_write_file?(new_file)
    new_file.open('w') {|f| }

    new_file.open('a') {|f| f.puts short_command }
    system "#{short_command} >> #{new_file}"

    new_file.open('a') {|f|
      f.puts
      f.puts '='*100
      f.puts long_command
    }
    system "#{long_command} >> #{new_file}"
  end
end
#gitk MERGE_HEAD

#---------------------------------------------------------------------------------------------------

unless @options[:no_act]
  file_orig_mtimes = files.inject({}) {|h,(k,file)| h[k] = file.mtime; h }
end

#---------------------------------------------------------------------------------------------------

#puts command="vimdiff #{files['upstream']} #{files['mine']}"


# TODO: make the order of tabs configurable
# and which tab is focused initially
tab_focused_initially = 5


command="vim -c '" + 
  # This leaves tab 1 as empty, so we close it later.

  "tabedit #{files['mine.actual']} | vert diffsplit #{files['upstream.actual']} | wincmd w | " +

  # in case they resolve conflict with upstream.from_conflicted vs. mine.from_conflicted -- now they'd need to transfer that into @file
  "tabedit #{@file} | vert diffsplit #{files['mine.from_conflicted']} | wincmd w | diffthis | wincmd w | diffthis | " +
  # for some reason, this isn't staying in diff mode, even with diffthis -- I have to go to that window and do :diffthis manually

  "tabedit #{@file} | vert diffsplit #{files['upstream.from_conflicted']} | wincmd w | diffthis | wincmd w | diffthis | " +

  # Too crowded: diffs above main files (total of 4 buffers in window):
  #"split #{files['upstream.log.diff']} | wincmd w | wincmd w | split #{files['mine.log.diff']} | wincmd w | " +

  # diffs in their own window:
  #"tabedit #{files['mine.log.diff']} | vert split #{files['upstream.log.diff']} | wincmd w | " +
  # would be nice if we could make each commit a link (press Enter to follow) to quickly show (git show) the whole file as it was in that version, kind of like fugitive




  # 1 log vs. main file (in case the 3 windows in one tab is too crowded)
  ("tabedit #{@file                 } | vert split #{files['upstream.log.diff']} | " if files['upstream.log.diff']).to_s +

  # 3 windows in one tab: Log from each version with main file in center
  #"tabedit #{files['mine.log.diff']} | vert split #{files['upstream.log.diff']} | wincmd w | vert split #{@file} | " +

  # upstream.from_conflicted vs. mine.from_conflicted
  "tabedit #{files['mine.from_conflicted']} | vert diffsplit #{files['upstream.from_conflicted']} | " +

  # 1 log vs. main file (in case the 3 windows in one tab is too crowded)
  #"tabedit #{files['mine.log.diff']} | vert split #{@file} | " +
  "tabedit #{@file                 } | vert split #{files['mine.log.diff']} | " +


  "tabclose 1 |" +
  "tabnext #{tab_focused_initially} |" +

  # TODO: set custom syntax highlighter instead, so that highlightin doesn't go away if they search for somethig else
  # TODO: set ]c command to jump to next >>>> etc. marker (next "diff"), but only when in the conflicted file; when in normal diff file, do its default behavior (next diff)
  %(:let @/ = "<<<<<<<\\\\|>>>>>>>\\\\|=======") + 
  "'"
puts command if @options[:verbose]

#---------------------------------------------------------------------------------------------------

unless @options[:no_act]
  backup_path = @file.add_suffix('.backup_for_git-merge-better')
  handle_backup_and_add_for_user_manually_resolving_conflict(@file, backup_path) do

    # Fork and exec vim so that it has full access to the terminal
    exec command if fork.nil?
    Process.wait

  end

  #puts "files.except(:actual)=#{files.except('actual').inspect}"
  changed_files = files.except('actual').reject {|k,file| not file.mtime > file_orig_mtimes[k] }
  if changed_files.any?
    puts "Warning: These files have been modified since you started editing:".yellow
    puts changed_files.map(&:last).join("\n").yellow
    #TODO: pass --default=n to rmversions in this case
  end
  exec "git rmversions #{@file}"
end

#---------------------------------------------------------------------------------------------------
