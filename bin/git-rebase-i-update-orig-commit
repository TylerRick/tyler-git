#!/usr/bin/env bash

set -euo pipefail
trap 'echo "❌ Error at line $LINENO: $BASH_COMMAND"' err

#════════════════════════════════════════════════════════════════════════════════════════════════════

usage() {
  cat - <<End >&2
Usage: $(basename "$0") <old-commit> <new-commit>

Updates the new commit ID in git's rewritten-list for a commit that you just modified with an exec command.

This is only intended to be used from within an exec line of a git rebase -i script!

Problem statement: If you amend a commit from an exec command, git's internal rewritten-commit
tracking feature will not know about this rewrite and will not track it. This prevents tools such as
notes.rewriteRef from working. In such cases, you must manually call git-rebase-i-update-orig-commit
to record the newly rewritten commit and associate it with its original commit id.

Example:
  git rebase -i --exec 'git commit -amend; new_commit=
    copy-something-from-orig-commit \$(git-rebase-i-get-orig-commit)' onto-commit

Context:

  During an interactive rebase, git keeps an internal mapping from pre-rewritten commit id to
  post-rewritten commit. It stores this in .git/rebase-merge/rewritten-list like this:

  <old-commit-id> <new-commit-id>

  At the end of a rebase, git will run \`git notes copy --for-rewrite=rebase\` to rewrite any note
  refs based on the rewritten-list mapping that it has kept.
End
  exit
}

if [ -z "${2-}" ]; then
  usage
fi

quiet=false
verbose=false
while [[ $# -gt 0 ]]; do
  case "$1" in
    --help | -h)      usage;;
    --quiet | -s)     quiet=true; shift ;;
    --verbose | -v)   verbose=true; shift ;;
    -*)               echo "Unknown option $1" >&2; exit 1 ;;
    *) break ;;
  esac
done

old_commit=$(git rev-parse --verify "$1"^{commit})
new_commit=$(git rev-parse --verify "$2"^{commit})

#════════════════════════════════════════════════════════════════════════════════════════════════════

rewritten_file=".git/rebase-merge/rewritten-list"

if [ ! -d .git/rebase-merge ]; then
  echo >&2 "❌ Not inside an interactive rebase with merge backend."
  exit 1
fi

if [ ! -f "$rewritten_file" ]; then
  # Append instead of try to modify
  echo "$old_commit $new_commit" >> $rewritten_file
  exit 0
fi

if ! grep "^$old_commit .*" $rewritten_file >/dev/null; then
  echo >&2 "❌ Could not find $old_commit in $rewritten_file!"
  exit 1
fi
matching_line=$(grep "^$old_commit .*" $rewritten_file)

# It's possible that when you end up amending a commit, you actually end up with the same commit id.
# This is because git commits are content-addressed objects — their SHA-1/SHA-256 hash is computed from:
# - The tree object (the contents of the files)
# - The parent commit(s),
# - The author and committer name, email, and timestamps,
# - The commit message.
# If all of those are identical, git doesn't need to create a new commit. Instead, it just gives you
# back the existing commit that it already has in its database.
if [ "$old_commit" = "$new_commit" ]; then
  tmp_file="$rewritten_file.tmp"
  grep -v "^$old_commit " "$rewritten_file" > "$tmp_file" || true
  mv "$tmp_file" "$rewritten_file"

  [ -n "$(git config notes.rewriteRef)" ] && notes_rewrite_enabled=true || notes_rewrite_enabled=false
  if $notes_rewrite_enabled && ! $quiet; then
		echo >&2 "⚠️  No-op rewrite detected (same commit ID). Removed redundant mapping."
		echo >&2 "⚠️   Warning: If using notes.rewriteMode overwrite, the notes for this commit will get lost!"
  fi
	if $verbose; then
		echo "⊘ $old_commit → $new_commit"
  fi
else
  old_rewritten_commit=$(echo "$matching_line" | awk '{print $2}')

  sed -i "s/^$old_commit .*/$old_commit $new_commit/" $rewritten_file
  if ! $quiet; then
    echo "✅ Updated rewritten commit mapping: $old_commit ─→ $new_commit (was $old_rewritten_commit)"
  fi
  if $verbose; then
    git log-oneline -1 $old_commit | sed 's/^/ ⊘ /'; echo
    git log-oneline -1 $new_commit | sed 's/^/ → /'; echo
  fi
fi
