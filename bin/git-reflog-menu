#!/usr/bin/ruby

#---------------------------------------------------------------------------------------------------
# To do:
# * (optionally) use ncurses so that we can redraw the screen when they move up or down
#   * can we just use part of the screen?
# * ? let the caller specify a command for each command, like -l=git-log -r=git-remove
# * show branches-commit-is-in
# * Possibly deprecate this command in favor of git-fsck --lost-found ?

#---------------------------------------------------------------------------------------------------
def usage
  puts "Usage: #{$0} [--default-command=<action>]"
  puts <<End
--default-command: The command to execute when a commit is selected from the menu.
--quit-on-select:   Quit after executing command
End
  exit 1
end

#-------------------------------------------------------------------------------
require 'rubygems' 
require 'facets'
require 'colored'
require 'pathname'
require 'facets/kernel/blank'
require File.dirname(__FILE__) + '/../lib/getch'
require File.dirname(__FILE__) + '/../lib/menu'
require 'quality_extensions/string/with_knowledge_of_color'

#---------------------------------------------------------------------------------------------------
require 'getoptlong'

@selected_command = 'git log -p --numstat'
@quit_on_select = false
@i = 0
@window_size = 5
@lines_count = @window_size*2


opts = GetoptLong.new(
  [ '--help',                      GetoptLong::NO_ARGUMENT ],
  [ '--selected-command',          GetoptLong::REQUIRED_ARGUMENT ],
  [ '--quit-on-select',            GetoptLong::NO_ARGUMENT ]
)
opts.each do | opt, arg |
  case opt
  when '--selected-command'
    @selected_command = arg
  when '--quit-on-select'
    @quit_on_select = true
  when '--help'
    usage
  end
end

#---------------------------------------------------------------------------------------------------

def raw_lines(count = @lines_count)
  if @raw_lines.nil? or count > @lines_count
    @raw_lines = `git reflog | head -n#{count}`.lines
    @lines_count = @raw_lines.to_a.size
  end
  @raw_lines
end

Commit = Struct.new(:commit, :line)
def commits
  raw_lines.inject([]) do |commits, line|
    commit = nil
    pretty = line.chomp.gsub(/(\S+)\s(\S+)\s(.*)$/) {
      # ed55e6b... HEAD@{0}: The rest ...
      # \   $1   / \  $2   / \   $3     /
      commit = $1.chomp('...')

      "#{$1.green} #{$2.blue} #{$3.cyan}"
    }
    commits << Commit.new(commit, pretty)
    commits
  end
end

def window
  left = [@i, @window_size].min
  right = 2*@window_size - left
  @i-left .. @i+right
end

def menu
  response = nil
  show_list = true
  selected_commit = nil

  catch :repeat do
    if show_list
      commits.each_with_index do |commit, i|
        commit, line = commit.commit, commit.line
        if i.in?(window)
          selected        = i == @i
          selected_commit = commit if selected

          print selected ? '->'.magenta : '  '
          print "#{i.to_s.rjust(2)}. "
          print selected ? line.strip_color.green : line
          print "\n"
        end
      end
    else
      show_list = true
    end

    #-------------------------------------------------------------------------------------
    response = STDIN.getch(:downcase => true)
    case response
      # Allow movement up and down in list
      when "\e[A", "\e\[D" # Previous (Up or Left)
        puts
        @i = [0, @i-1].max
        throw :repeat

      when "\e\[B", "\e\[C", " " # Next (Down or Right or Space)
        puts
        max_i_needed = @i + 1 + window.last
        if max_i_needed > raw_lines.to_a.size-1
          raw_lines(@lines_count * 4) # forces reload
          if @i+1 > raw_lines.to_a.size-1
            puts "At end".red
          else
            @i+=1
          end
        else
          @i+=1
        end
        throw :repeat

      when 'q'
        return :quit

      when "\n"
        return :select, selected_commit

      else
        # Invalid option. Do nothing.
        #puts response.inspect
        puts
        throw :repeat

        #show_list = false
    end # case response
  end

  response
end

#---------------------------------------------------------------------------------------------------
loop do
  response, selected = menu

  case response
    when :quit
      exit 0

    when :select
      #puts "selected #{selected}"
      system "#{@selected_command} #{selected}"
      exit 0 if @quit_on_select

  end # case response

end


#---------------------------------------------------------------------------------------------------
