#!/usr/bin/ruby

#---------------------------------------------------------------------------------------------------
def usage
  puts "Usage: #{$0} [--selected-command=<action>]"
  puts <<End
--selected-command: The command to execute when a commit is selected from the menu.
--quit-on-select:   Quit after executing command
End
  exit 1
end

#-------------------------------------------------------------------------------
# To do:
# * (optionally) use ncurses so that we can redraw the screen when they move up or down
#   * can we just use part of the screen?
# * ? let the caller specify a command for each command, like -l=git-log -r=git-remove

#-------------------------------------------------------------------------------
require 'rubygems' 
require 'facets'
require 'facets/dictionary'
require 'colored'
require 'pathname'
require 'facets/blank'
require File.dirname(__FILE__) + '/../lib/getch'

#---------------------------------------------------------------------------------------------------
require 'getoptlong'

@selected_command = 'git log -p --numstat'
@quit_on_select = false
@format = 'reflog'
@i = 0
@window_size = 5
@lines_count = @window_size*2


opts = GetoptLong.new(
    [ '--selected-command',          GetoptLong::REQUIRED_ARGUMENT ],
    [ '--help',                      GetoptLong::NO_ARGUMENT ],
    [ '--quit-on-select',            GetoptLong::NO_ARGUMENT ]

)
opts.each do | opt, arg |
  case opt
  when '--selected-command'
    @selected_command = arg
  when '--quit-on-select'
    @quit_on_select = arg
  when '--help'
    usage
  end
end

#---------------------------------------------------------------------------------------------------

def raw_lines(count = @lines_count)
  if @raw_lines.nil? or count > @lines_count
    if @format == 'reflog'
      @raw_lines = `git reflog | head -n#{count}`.lines
    else
      raise "Unrecognized format"
    end
    @lines_count = @raw_lines.size
  end
  @raw_lines
end

Line = Struct.new(:commit, :line)
def lines
  if @format == 'reflog'
    raw_lines.inject([]) do |lines, line|
      commit = nil
      pretty = line.chomp.gsub(/(\S+)\s(\S+)\s(.*)$/) {
        # ed55e6b... HEAD@{0}: The rest ...
        # \   $1   / \  $2   / \   $3     /
        commit = $1.chomp('...')

        "#{$1.green} #{$2.blue} #{$3.cyan}"
      }
      lines << Line.new(commit, pretty)
      lines
    end
  else
    raise "Unrecognized format"
  end
end

def window
  left = [@i, @window_size].min
  right = 2*@window_size - left
  @i-left .. @i+right
end

def menu
  response = nil
  show_menu = true
  current_commit = nil

  catch :repeat do
    if show_menu
      lines.each_with_index do |line, i|
        commit, line = line.commit, line.line
        if i.in?(window)
          current_commit = commit if i == @i
          print (i == @i ? '->'.magenta : '  ')
          print "#{i.to_s.rjust(2)}. "
          print line
          print "\n"
        end
      end
    else
      show_menu = true
    end

    #-------------------------------------------------------------------------------------
    response = STDIN.getch(:downcase => true)
    show_menu = true
    case response
      # Allow movement up and down in list
      when "\e[A", "\e\[D" # Previous (Up or Left)
        puts
        @i = [0, @i-1].max
        throw :repeat

      when "\e\[B", "\e\[C", " " # Next (Down or Right or Space)
        puts
        max_i_needed = @i + 1 + window.last
        if max_i_needed > raw_lines.size-1
          raw_lines(@lines_count * 4) # forces reload
          if @i+1 > raw_lines.size-1
            puts "At end".red
          else
            @i+=1
          end
        else
          @i+=1
        end
        throw :repeat

      when 'q'
        return :quit

      when "\n"
        return :select, current_commit

      else
        # Invalid option. Do nothing.
        #puts response.inspect
        puts
        throw :repeat

        #show_menu = false
    end # case response
  end

  response
end

#---------------------------------------------------------------------------------------------------
loop do
  response, selected = menu

  case response
    when :quit
      exit 0

    when :select
      #puts "selected #{selected}"
      system "#{@selected_command} #{selected}"
      exit 0 if @quit_on_select

  end # case response

end


#---------------------------------------------------------------------------------------------------
