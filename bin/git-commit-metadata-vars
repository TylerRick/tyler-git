#!/bin/bash

commit="${1:-@}"

# We could instead use the function provided by "$(git --exec-path)/git-sh-setup":
#   eval "$(get_author_ident_from_commit    $rev)"
# but it doesn't provide a handy function for committer out-of-the-box, and its implementation is
# arguably not any better than this rather verbose one generated by AI. Both implementations are not
# as clean as one would like, but until git provides a nice plumbing command like
# `git commit-metadata --for-shell-eval`, this is about as good as it gets.

# We could instead use git show to extract these values, but I suspect it would be slower to run `git show` 6 times compared to one `git show | awk` pipeline.
#GIT_COMMITTER_NAME="$(git show -s --format='%cn'  $commit)"
#GIT_COMMITTER_EMAIL="$(git show -s --format='%ce'  $commit)"
#GIT_COMMITTER_DATE="$(git show -s --format='%cI'  $commit)"

# We could use this as a simpler way to get dates:
# GIT_AUTHOR_DATE="$(git show -s --format='%aI' $rev)"
# GIT_COMMITTER_DATE="$(git show -s --format='%cI' $rev)"

git show --no-patch --pretty=raw --encoding="$encoding" "$commit" | awk '
  function format_date(ts, tz,   sign, h, m) {
    sign = substr(tz, 1, 1)
    h = substr(tz, 2, 2)
    m = substr(tz, 4, 2)
    return strftime("%Y-%m-%dT%H:%M:%S", ts) sign h ":" m
  }

  /^author / {
    match($0, /^author (.*) <(.*)> ([0-9]+) ([+-][0-9]{4})/, m)
    printf "export GIT_AUTHOR_NAME=\"%s\"\n", m[1]
    printf "export GIT_AUTHOR_EMAIL=\"%s\"\n", m[2]
    printf "export GIT_AUTHOR_DATE=\"%s\"\n", format_date(m[3], m[4])
  }

  /^committer / {
    match($0, /^committer (.*) <(.*)> ([0-9]+) ([+-][0-9]{4})/, m)
    printf "export GIT_COMMITTER_NAME=\"%s\"\n", m[1]
    printf "export GIT_COMMITTER_EMAIL=\"%s\"\n", m[2]
    printf "export GIT_COMMITTER_DATE=\"%s\"\n", format_date(m[3], m[4])
  }
'
