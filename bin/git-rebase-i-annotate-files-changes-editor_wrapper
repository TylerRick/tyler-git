#!/bin/bash
# Usage: GIT_SEQUENCE_EDITOR=/path/to/this/file git rebase -i

set -e

mkdir -p .git/.local
commit_list_file=.git/.local/$(now)_rebase_annotated_commit_list
commit_list_link=.git/.local/rebase_annotated_commit_list
rebase_todo_back=.git/.local/$(now)_rebase_todo.bak
rebase_todo_file=.git/.local/$(now)_rebase_todo
rebase_todo_link=.git/.local/rebase_todo

# TODO: --noninteractive or  2>/dev/null
#orig_base=$(git-ensure-commit-is-ancestor $onto)
#git log-oneline --reverse $orig_base..@ > .git/.local/commits_from_orig_base
# For a one-line-formatted list of commits from original base that you can compare against
#echo "Do vertical split with .git/.local/commits_from_orig_base if you want to compare original list of commits with new list (to make sure you haven't included a duplicate commit, for example, if you are rebasing on a new base with many similar + diverging commits)"

set -x
git log --reverse --no-color --name-status --pretty=format:"______________________________________%n%h  (%ai)%n%s%b"  $onto^...@ > $commit_list_file
symlink -f $commit_list_file \
           $commit_list_link
[ -e $commit_list_link ] && ls -lA $commit_list_link

rebase_todo_tmp_file=$1 #.git/rebase-merge/git-rebase-todo
cp $rebase_todo_tmp_file \
   $rebase_todo_back

vim -O $rebase_todo_tmp_file \
       $commit_list_file

cp $rebase_todo_tmp_file \
   $rebase_todo_file
symlink -f $rebase_todo_file \
           $rebase_todo_link
[ -e $rebase_todo_link ] && ls -lA $rebase_todo_link
