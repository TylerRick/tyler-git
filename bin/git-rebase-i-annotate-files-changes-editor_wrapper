#!/bin/bash
# Usage: GIT_SEQUENCE_EDITOR=/path/to/this/file git rebase -i

set -e

dir=.git/.local/rebase/$(now)
mkdir -p $dir

log_short_with_name_status_file=$dir/log_short_with_name_status
:;          log_with_patch_file=$dir/log_with_patch
:;             rebase_todo_orig=$dir/rebase_todo.orig
:;             rebase_todo_file=$dir/rebase_todo

# TODO: --noninteractive or  2>/dev/null
#orig_base=$(git-ensure-commit-is-ancestor $onto)
#git log-oneline --reverse $orig_base..@ > .git/.local/commits_from_orig_base
# For a one-line-formatted list of commits from original base that you can compare against
#echo "Do vertical split with .git/.local/commits_from_orig_base if you want to compare original list of commits with new list (to make sure you haven't included a duplicate commit, for example, if you are rebasing on a new base with many similar + diverging commits)"

#set -x
export GIT_PAGER=
(echo '# vim: ft=diff';      git log --reverse --no-color --name-status --pretty=tformat:"______________________________________%n%h  (%ai)%n%B"                   $onto^...@ ) > $log_short_with_name_status_file
# prepend with? set ft=diff
(echo '# vim: ft=gitrebase'; git log --reverse --no-color               --pretty=tformat:"%n%n______________________________________%n%h  (%ai)%n%w(0,4,4)%B" -p   $onto^...@ ) > $log_with_patch_file

rebase_todo_tmp_file=$1 # Should be .git/rebase-merge/git-rebase-todo
cp $rebase_todo_tmp_file \
   $rebase_todo_orig
(echo '# vim: ft=gitrebase'; cat $rebase_todo_orig) | sponge $rebase_todo_orig

# { Open editor
vim -O $rebase_todo_tmp_file \
       $log_short_with_name_status_file \
    -c "tabnew $log_with_patch_file | tabnew $log_short_with_name_status_file | tabnew $rebase_todo_orig | tabfirst"
# } Open editor

cp $rebase_todo_tmp_file \
   $rebase_todo_file
