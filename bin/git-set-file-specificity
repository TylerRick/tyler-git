#!/usr/bin/env bash

# git-set-file-specificity
# Usage: git-set-file-specificity <file> <specificity>
# Adds or moves <file> into .git/file_specificity/<specificity>
# Valid specificity: common, specific, mixed

set -euo pipefail
file="$1"
specificity="$2"
base=".git/file_specificity"

# validate specificity
if [[ ! "$specificity" =~ ^(common|specific|mixed)$ ]]; then
	echo "Usage: $0 <path> <common|specific|mixed>" >&2
	exit 2
fi

# get existing specificity (allow multiple)
out=$(git-get-file-specificity "$file" 2>&1 || true)
recorded=()
if [[ "$out" =~ matches[[:space:]]+multiple[[:space:]]+lists:[[:space:]]+(.*)$ ]]; then
	read -r -a recorded <<< "${BASH_REMATCH[1]}"
elif [[ "$out" =~ ^(common|specific|mixed)$ ]]; then
	recorded=("$out")
else
	recorded=()
fi

# if not recorded yet, append and exit
if [[ ${#recorded[@]} -eq 0 ]]; then
	echo "$file" >> "$base/$specificity"
	exit 0
fi

# if already exactly the same
if [[ ${#recorded[@]} -eq 1 && "${recorded[0]}" == "$specificity" ]]; then
	exit 0
fi

# prompt override
echo "'$file' currently recorded as: ${recorded[*]}"
read -p "Change to '$specificity'? [y/N] " ans
if [[ ! "$ans" =~ ^[Yy] ]]; then
	echo "Aborted."
	exit 0
fi

# remove from old lists
for rec in "${recorded[@]}"; do
	if [[ "$rec" != "$specificity" ]]; then
		sed -i -e "/^$(printf '%s' "$file" | sed 's/[\/&]/\\&/g')\$/d" "$base/$rec"
	fi
done

# add to new list if not already
if [[ ! " ${recorded[*]} " =~ " $specificity " ]]; then
	echo "$file" >> "$base/$specificity"
fi

exit 0
