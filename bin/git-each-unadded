#!/usr/bin/env ruby
#-------------------------------------------------------------------------------
# This is for *untracked* files as git add -p is for *unstaged* (but tracked) files



#-------------------------------------------------------------------------------

require 'rubygems' 
require 'git'      # requires my changes to ruby-git, (git.status.untracked)
require 'colored'
require 'pathname'

begin
  gem 'termios'
  require 'termios'
  begin
    # Set up termios so that it returns immediately when you press a key.
    # (http://blog.rezra.com/articles/2005/12/05/single-character-input)
    t = Termios.tcgetattr(STDIN)
    save_terminal_attributes = t.dup
    t.lflag &= ~Termios::ICANON
    Termios.tcsetattr(STDIN, 0, t)

    # Set terminal_attributes back to how we found them...
    at_exit { Termios.tcsetattr(STDIN, 0, save_terminal_attributes) }
  rescue RuntimeError => exception    # Necessary for automated testing.
    if exception.message =~ /can't get terminal parameters/
      # :todo: Can we detect if they are piping/redirecting stdout? Don't show warning if they are simply piping stdout.
      # On the other hand, when ELSE do we expect to not find a terminal? Is this message *ever* helpful?
      # Only testing? Then maybe the tests should set an environment variable or *something* to communicate that they want non-interactive mode.
      puts 'Warning: Terminal not found.'
      $interactive = false
    else
      raise
    end
  end
  $termios_loaded = true
rescue Gem::LoadError
  $termios_loaded = false
end

#-------------------------------------------------------------------------------

repo_root = base_dir = `git-base-dir`.chomp
#wd = Pathname.new(Dir.getwd)
#cdup = Pathname.new(repo_root).realpath.relative_path_from(wd.realpath)
cdup = `git-rev-parse --show-cdup`.chomp

begin
  git = Git.open('..')
  git.status.untracked.each do |filename|
    path = File.join(cdup, filename)
    print "#{path.magenta} : (a)dd; (v)iew, add to .git(i)gnore, ignore for (m)e only, (r)emove, (q)uit, ..., Enter/Space to skip" + " > ".cyan

    resp = STDIN.getc.chr
    case resp

    when 'a'
      system %(git-add "#{path}")
      puts

    when 'v'
      system %(cat "#{path}")
      puts
      redo

    when 'i'
      system %(echo "#{path}" >> #{repo_root}.gitignore)
      puts

    when 'm'
      system %(echo "#{path}" >> #{repo_root}.git/info/exclude)
      puts

    when 'r'
      print "Really delete".red + " #{path.magenta}" + "?? (y)es/(r)eally/(n)o > ".red
      resp = STDIN.getc.chr
      system %(rm "#{path}") if ['y', 'r'].include? resp.downcase
      puts

    when 'q'
      raise Interrupt, ''

    when ' ', "\n"

    else
      puts
      redo
    end

  end

rescue Interrupt
  puts
end

system %(git status)
