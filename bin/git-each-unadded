#!/usr/bin/env ruby
#-------------------------------------------------------------------------------
# This is for *untracked* files as git add -p is for *unstaged* (but tracked) files
# It is similar to git add -i and then selecting '[a]dd untracked' but is easier and more fun to use.

#-------------------------------------------------------------------------------

require 'rubygems' 
require 'git'      # requires my changes to ruby-git, (git.status.untracked)
require 'colored'
require 'pathname'
require 'facets/blank'
require File.dirname(__FILE__) + '/../lib/getch'

gem 'quality_extensions', '>=0.0.3'
require 'quality_extensions/file_test/binary_file'

begin
  require 'terminfo' #http://www.a-k-r.org/ruby-terminfo/
  $screen_width=TermInfo.screen_width
rescue LoadError
  STDERR.puts "Warning: Could not load terminfo"
  $screen_width=80
end

#-------------------------------------------------------------------------------

@repo_root = `git-base-dir`.chomp
@cdup = `git-rev-parse --show-cdup`.chomp
def relative_to_wd(path)
  @cdup.blank? ? path : File.join(@cdup, path)
end
@git = Git.open(@repo_root)
@lines_preview_to_show = 50

begin
  show_full = false

  @git.status.untracked.each do |filename|
    path = relative_to_wd(filename)
    pathname = Pathname.new(path)

    if show_full
    else
      #show_full = true
    end

    print path.green + " [a/v/i/m/r/q/?] > ".cyan

    resp = STDIN.getc.chr
    case resp

    when '?'
      puts
      puts "(a)dd; (v)iew, add to .git(i)gnore, ignore for (m)e only, (r)emove, (q)uit, ..., Enter/Space to skip"
      show_full = false
      redo

    when 'a'
      system %(git-add "#{path}")
      puts

    when 'v'
      puts ('_'*$screen_width).green
      if pathname.directory?
        puts '[Directory]'.cyan
        system %(ls -al #{path})
      elsif FileTest.binary_file?(path)
        puts "(Binary file -- cannot show preview)".bold
      else
        lines = `wc -l #{path}`.chomp.to_i unless pathname.directory?
        if @lines_preview_to_show >= 1 and lines >= 1
          system %(head -n #{@lines_preview_to_show} #{path})
          print ''.white
          puts '...' unless !$?.success? || lines <= @lines_preview_to_show
        elsif lines == 0
          puts '[Empty file]'.cyan
        end
      end
      show_full = false
      redo

    when 'i'
      system %(git-ignore "#{path}")
      puts

    when 'm'
      system %(git-ignore-for-me "#{path}")
      puts

    when 'r'
      path_obj = Pathname.new(path)
      if path_obj.directory? and path_obj.children.any?
        print "Really delete".red + " #{path.magenta}" + " and its contents?? (y)es/(n)o > ".red
        resp = STDIN.getc.chr
        path_obj.rmtree if resp.downcase == 'y'
      else
        path_obj.delete
      end
      puts

    when 'q'
      raise Interrupt, ''

    when ' '
      puts
      # next
 
    when "\n"
      # next

    else
      puts
      show_full = false
      redo
    end

  end

rescue Interrupt
  puts
end

system %(git status)
