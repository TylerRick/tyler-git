#!/usr/bin/env ruby
#---------------------------------------------------------------------------------------------------
require 'pp'
require 'pathname'
gem 'facets'
require 'facets/string/cleanlines'
require 'facets/class/to_proc'
gem 'quality_extensions'
require 'quality_extensions/pathname'
require 'quality_extensions/enumerable/select_while'
gem 'colored'
require 'colored'

#---------------------------------------------------------------------------------------------------
# Parse args

require 'optparse'

@options = {
  :verbose => 0,
  :show => 'revision',
}

def parse_args
  ARGV.options do |opts|
    opts.banner = <<End
Usage: #{File.basename($0)} [options]

Git rebase applies a series of commits (up to a specified 'head' commit, but excluding those from 'onto' or earlier), after rewinding HEAD to a given 'onto' commit.

This command tells you various details about the state of the rebase.

Default output is revision only.
End

    opts.on("-v", "--verbose", "Be more verbose")                                                                       { @options[:verbose] = 1 }
    opts.on("-f", "--filename", "Output only the filename for the commit_info_file (normal rebase only)")               { @options[:show] = 'commit_info_filename' }
    opts.on("--onto", "Output which commit we're applying/replaying commits onto")                                      { @options[:show] = 'onto' }
    opts.on("--head", "Output the original HEAD revision")                                                              { @options[:show] = 'head' }
    opts.on("--rev", "--current-rev", "--revision", "Output which commit in that series of commits it is *currently* stopped on. (And I suppose the only reason it would have stopped is because it had a merge conflict.)"   )     { @options[:show] = 'revision' }
    opts.on("-s", "--summary",  "Output the summary from the 'commit_info_file'")                                       { @options[:show] = 'commit_info_file_summary' }
    opts.on("-p", "--patch",  "Output the entire 'commit_info_file' including patch")                                   { @options[:show] = 'commit_info_file' }
    opts.on("--vv", "--debug",  "Be more verbose")                                                                      { @options[:verbose] = 2 }
    opts.on("-h", "--help", "Show this help message.")                                                                  { puts opts; exit }
    opts.parse!
  end
end
parse_args

#---------------------------------------------------------------------------------------------------

rebase_normal_dir = Pathname.new('.git/rebase-apply')
rebase_interactive_dir = Pathname.new('.git/rebase-merge')

if (rebase_dir = [rebase_normal_dir, rebase_interactive_dir].detect(&:exist?))
  rebase_type = rebase_dir == rebase_normal_dir ? :normal : :interactive

else
  fail "rebase_dir does not exist"
end

#---------------------------------------------------------------------------------------------------
# This is the "current patch"
patch_file = rebase_dir + 'patch'
patch = patch_file.read.chomp
#puts patch.lines.to_a[0..10]

=begin
# Extract (from the 'patch' file) the list of files changes
# app/views/whatever/file.html.erb    |    5 +-
# .../_file2.html.erb                 |   40 +-----------------
# .../_file3.html.erb                 |   45 ++++++++++----------
files_changed_from_patch = ''
state = :initial
patch.lines.each do |line|
  #puts state
  if state == :initial and line =~ /^---$/
    state = :saving
  end
  if state == :saving and line =~ /^diff --git/
    break
  end
  if state == :saving
    files_changed_from_patch << line
  end
end
puts files_changed_from_patch
puts ('-'*100).green
=end

#---------------------------------------------------------------------------------------------------
# represents the result of git log -p for one commit (or probably git show), or of a commit info file in .git/rebase-apply
class CommitInfo
  def initialize(contents, rev = nil)
    @contents = contents
    @rev = rev
  end

  #attr_reader :rev
  def rev
    return @rev if @rev
    regexp = /^From (\w+)/
    if match = to_s.match(regexp)
      @rev = match[1]
    else
      raise "Error: Pattern not found"
    end
  end

  def top
    #p @contents.grep(/[.\r\n]*^---/m).to_a
    #a = @contents.scan(/.*^---/m).to_a
    #a.size
    @contents.lines.select_until {|line| line =~ /^---/ }.join
  end

  def patch
    @contents
  end

  def to_s
    @contents
  end
  def match(other)
    to_s.match(other)
  end
end

#---------------------------------------------------------------------------------------------------

if rebase_type == :normal
  # Now try to find the 00nn file that contains the patch so we can get the rest of the metadata for that commit
  commit_info_files = Dir["#{rebase_dir}/[0-9][0-9][0-9][0-9]"]
  #p commit_info_files
  commit_info_file = commit_info_files.map(&Pathname).detect do |file|
    puts file if @options[:verbose] >= 2
    contents = Pathname.new(file).read
    # Old: found = contents.include?(files_changed_from_patch)
    (puts 'contents:'; puts contents.lines.to_a[-10..-1]) if @options[:verbose] >= 2
    (puts 'patch:';    puts patch   .lines.to_a[-10..-1]) if @options[:verbose] >= 2
    found = contents.include?(patch)
    puts "found=#{found.inspect}" if @options[:verbose] >= 2
    found = true
    found
  end
  puts "commit_info_file: #{commit_info_file}\n\n" if @options[:verbose] >= 1
  commit_info = CommitInfo.new(commit_info_file.read)

else
  commit_info = nil
  Pathname.new('.git/rebase-merge/done').read.cleanlines.each do |line|
    #puts line
    if line =~ /^(\w+)\s+(\w+)/
      rev = $2
      #puts "rev=#{rev.pretty_inspect}"
      log_p = `git log --no-color -p -1 #{rev}`
      if log_p.include?(patch)
        #puts "log_p=#{log_p}"
        commit_info = CommitInfo.new(log_p, rev)
        break commit_info
      end
    end
    false
  end
  #puts "commit_info=#{commit_info.inspect}"

end

#---------------------------------------------------------------------------------------------------
if @options[:show] == 'commit_info_filename'
  puts "#{commit_info_file}"


elsif @options[:show] == 'onto'
  if (file = rebase_dir + 'onto').exist?
    onto = file.read.chomp
    onto = `git name-rev --name-only --always --no-undefined #{onto}`.chomp
  end
  puts onto

elsif @options[:show] == 'head'
  # normal rebase:      orig-head
  # rebase interactive: head or head-name
  if (file = [rebase_dir + 'orig-head', rebase_dir + 'head'].detect(&:exist?))
    head = file.read.chomp
    head = `git name-rev --name-only --always --no-undefined #{head}`.chomp
  end
  puts head

elsif @options[:show] == 'commit_info_file'
  puts commit_info
  exit 0

elsif @options[:show] == 'commit_info_file_summary'
  puts commit_info.top
  exit 0

else
  # Default behavior: extract and print revision
  puts "#{commit_info.rev}"
end


#---------------------------------------------------------------------------------------------------

