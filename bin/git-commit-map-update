#!/usr/bin/env bash

set -euo pipefail
trap 'echo "❌ Error at line $LINENO: $BASH_COMMAND" >&2' err

#════════════════════════════════════════════════════════════════════════════════════════════════════

usage() {
  cat <<EOF >&2
Usage: $(basename "$0") [--quiet|-s] [--verbose|-v] <mapping-file> <old-commit> <new-commit>

Updates the rewritten-commit mapping in <mapping-file> by replacing the entry for <old-commit>
with <new-commit>. If <mapping-file> does not exist, it is created with a single mapping.
If <old-commit> == <new-commit>, any existing mapping is removed.

Supports mapping files with optional trailing comments ("# ...").  When
updating, any existing comment on the line is removed.

TODO: Give option for what to when <old-commit> == <new-commit>: any existing mapping is removed, or
just update it normally.

Options:
  -q, --quiet      Suppress non-error output
  -v, --verbose    Show detailed before/after log lines
  -h, --help       Show this help message
EOF
  exit 1
}

# Parse flags
quiet=false
verbose=false
while [[ $# -gt 0 ]]; do
  case "$1" in
    -q|--quiet)    quiet=true;    shift ;;  
    -v|--verbose)  verbose=true;  shift ;;  
    -h|--help)     usage ;;      
    --)            shift; break ;;
    -* )           echo "Unknown option: $1" >&2; usage ;;  
    *)             break ;;      
  esac
done

if (( $# != 3 )); then
  usage
fi

mapping_file=$1
old_commit=$(git rev-parse --verify "$2"^{commit})
new_commit=$(git rev-parse --verify "$3"^{commit})

debug_find_pattern="^$old_commit\\s+[0-9a-f]+(\\s*#.*)?$"

# If mapping file doesn't exist, just append new mapping (no comment)
if [[ ! -f "$mapping_file" ]]; then
  echo "$old_commit $new_commit" >> "$mapping_file"
  $quiet || echo "✅ Added mapping: $old_commit → $new_commit"
  exit 0
fi

# Verify old_commit is present (ignoring trailing comments)
if ! grep -qE "$debug_find_pattern" "$mapping_file"; then
  echo "❌ Could not find mapping for $old_commit in $mapping_file" >&2
  exit 1
fi

# Handle no-op rewrite (old == new): remove existing line
if [[ "$old_commit" == "$new_commit" ]]; then
  tmp_file="${mapping_file}.tmp"
  grep -vE "$debug_find_pattern" "$mapping_file" > "$tmp_file"
  mv "$tmp_file" "$mapping_file"
  if ! $quiet; then
    echo "⚠️  Removed no-op mapping for $old_commit"
  fi
  if $verbose; then
    echo "⊘ $old_commit"
  fi
  exit 0
fi

# Otherwise update existing mapping: strip any trailing comment
if $verbose; then
  before_line=$(grep -E "$debug_find_pattern" "$mapping_file")
  echo "Before: $before_line"
fi

# Use sed to replace mapping and drop any comment
sed -i.bak -E \
  "s#$debug_find_pattern#$old_commit $new_commit#" \
  "$mapping_file"

if ! $quiet; then
  echo "✅ Updated mapping: $old_commit → $new_commit"
fi

if $verbose; then
  after_line="$(grep -E "^$old_commit\\s+$new_commit$" "$mapping_file")"
  echo "After : $after_line"
fi
