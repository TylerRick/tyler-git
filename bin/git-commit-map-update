#!/usr/bin/env bash

set -euo pipefail
trap 'echo "❌ Error at line $LINENO: $BASH_COMMAND" >&2' err

#════════════════════════════════════════════════════════════════════════════════════════════════════

usage() {
  cat <<End >&2
Usage: $(basename "$0") [--quiet|-q] [--verbose|-v] <mapping-file> <old-commit> <new-commit>

Updates the commit mapping in <mapping-file>, replacing the entry for <old-commit>
with <new-commit>. Supports files with full or short hashes and optional trailing comments.
Old or new commits passed may be short or full; they are expanded internally.

If <mapping-file> does not exist, a new file is created with a single mapping.
If old and new are identical, any existing mapping is removed.

TODO: Give option for what to when <old-commit> == <new-commit>: any existing mapping is removed, or
just update it normally.

Options:
  -q, --quiet      Suppress non-error output
  -v, --verbose    Show before/after mapping lines
  -h, --help       Show this help message
End
  exit 1
}

# Parse flags
quiet=false
verbose=false
while [[ $# -gt 0 ]]; do
  case "$1" in
    -q|--quiet)    quiet=true;    shift ;;  
    -v|--verbose)  verbose=true;  shift ;;  
    -h|--help)     usage ;;      
    --)            shift; break ;;
    -* )           echo "Unknown option: $1" >&2; usage ;;  
    *)             break ;;      
  esac
done

# Expect args
if (( $# != 3 )); then
  usage
fi

mapping_file=$1
old_input=$2
new_input=$3

# Expand commits
old_full=$(git rev-parse --verify "$old_input"^{commit})
new_full=$(git rev-parse --verify "$new_input"^{commit})
old_short=$(git rev-parse --short "$old_full")
new_short=$(git rev-parse --short "$new_full")

# Regex to match a mapping line by old commit (short or full)
pattern="^($old_full|$old_short)\\s+[0-9a-f]+(\\s*#.*)?$"

# Create file if missing
if [[ ! -f "$mapping_file" ]]; then
  echo "$old_full $new_full" >> "$mapping_file"
  $quiet || echo "✅ Added mapping: $old_full → $new_full"
  exit 0
fi

# Verify old exists
if ! grep -qE "$pattern" "$mapping_file"; then
  echo "❌ Could not find mapping for $old_input in $mapping_file" >&2
  exit 1
fi

# No-op rewrite: remove line
if [[ "$old_full" == "$new_full" ]]; then
  tmp=$(mktemp)
  grep -vE "$pattern" "$mapping_file" > "$tmp"
  mv "$tmp" "$mapping_file"
  $quiet || echo "⚠️  Removed mapping for $old_full"
  $verbose && echo "⊘ $old_full"
  exit 0
fi

# Update mapping: remove any trailing comment
$verbose && echo "Before: $(grep -E "$pattern" "$mapping_file" || true)"

# Match and replace any line starting with old_short or old_full
escaped_old=$(printf "%s" "$old_short" | sed 's/[.[\*^$]/\\&/g')
escaped_old_full=$(printf "%s" "$old_full" | sed 's/[.[\*^$]/\\&/g')

sed -i.bak -E \
  "s/^($escaped_old|$escaped_old_full)[[:space:]]+[0-9a-f]+.*/$old_full $new_full/" \
  "$mapping_file"

$quiet || echo "✅ Updated mapping: $old_full → $new_full"
$verbose && echo "After : $(grep -E "^$old_full\\s+$new_full$" "$mapping_file" || true)"

exit 0
