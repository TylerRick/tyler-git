#!/usr/bin/env bash
# git-get-file-specificity (fast & correct)
# Usage: git-get-file-specificity <path>
# Returns: common | specific | mixed  (or nothing if not listed)
# If listed in >1 list, prints error to stderr and exits 1.

set -eo pipefail

file="$1"
base=".git/file_specificity"
#DEBUG=1

# Read each list once, stripping comments/blank lines, keep as newlineâ€‘delimited string.
declare -A lists  # lists[type] -> "pat1\npat2\n..."
for type in common specific mixed; do
  patfile="$base/$type"
  [[ -f "$patfile" ]] || continue
  lists[$type]=$(sed -e 's/#.*//' -e 's/[[:space:]]*$//' -e '/^[[:space:]]*$/d' "$patfile")
  [[ -n "$DEBUG" ]] && echo "[DEBUG] cached ${type}: $(echo "${lists[$type]}" | wc -l) patterns" >&2
done

matches=()

for type in common specific mixed; do
  [[ -z "${lists[$type]:-}" ]] && continue
  while IFS= read -r pat; do
    [[ -z "$pat" ]] && continue
    if [[ "$pat" == */ ]]; then
      [[ -n "$DEBUG" ]] && echo "[DEBUG] $type prefix? '$file' starts '${pat}'" >&2
      [[ "$file" == ${pat}* ]] && { matches+=("$type"); break; }
    else
      [[ -n "$DEBUG" ]] && echo "[DEBUG] $type glob? '$file' == '$pat'" >&2
      [[ "$file" == $pat ]] && { matches+=("$type"); break; }
    fi
  done <<< "${lists[$type]}"
done

case ${#matches[@]} in
  0) exit 0 ;;
  1) echo "${matches[0]}" ;;
  *) echo "ERROR: '$file' matches multiple lists: ${matches[*]}" >&2; exit 1 ;;
esac
