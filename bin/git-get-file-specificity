#!/usr/bin/env bash
# git-get-file-specificity
# Given a file path, echo one of: common, specific, mixed (or nothing).
# Searches .git/file_specificity/{common,specific,mixed}
# Debug output enabled by default (comment out or wrap in "if [ -n \"$DEBUG\" ]" to disable later)

file="$1"
base=".git/file_specificity"

# helper: read patterns, strip comments and blank lines
to_patterns() {
  sed -e 's/#.*//' -e '/^[[:space:]]*$/d' "$1"
}

matches=()

# unified loop over types
for type in common specific mixed; do
  patfile="$base/$type"
  [[ -f "$patfile" ]] || continue
  echo "[DEBUG] checking against '$type' patterns..." >&2

  while IFS= read -r line; do
    # strip inline comments and whitespace
    pat=$(echo "$line" | sed -e 's/#.*//' -e 's/[[:space:]]*$//')
    [[ -z "$pat" ]] && continue
    echo "[DEBUG] pattern: '$pat'" >&2

    if [[ "$pat" == */ ]]; then
      # directory prefix match
      echo "[DEBUG] checking prefix: '$file' starts with '$pat'" >&2
      if [[ "$file" == ${pat}* ]]; then
        matches+=("$type")
        break
      fi
    else
      # glob match
      echo "[DEBUG] checking glob: '$file' == '$pat'" >&2
      if [[ "$file" == $pat ]]; then
        matches+=("$type")
        break
      fi
    fi
  done < <(to_patterns "$patfile")
done

# decide based on matches array length
case ${#matches[@]} in
  0)
    # nothing recorded
    exit 0
    ;;
  1)
    echo "${matches[0]}"
    exit 0
    ;;
  *)
    echo "ERROR: '$file' matches multiple specificity lists: ${matches[*]}" >&2
    exit 1
    ;;
esac

