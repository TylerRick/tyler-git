#!/usr/bin/ruby

#---------------------------------------------------------------------------------------------------
def usage
  puts "Usage: #{$0} [-f] ..."
  puts <<End
Takes the same options as git reset since this is simply a wrapper for git reset.

-f: Force without confirmation. (Warning: not safe)
End
  exit 1
end

#-------------------------------------------------------------------------------
# To do:
# * add an option ('s') to save changes in a temporary branch / stash and then automatically apply them after the reset

#---------------------------------------------------------------------------------------------------
require 'getoptlong'

opts = GetoptLong.new(
  [ '--help',                      GetoptLong::NO_ARGUMENT ],
  [ '--force', '-f',               GetoptLong::NO_ARGUMENT ]
)
opts.each do | opt, arg |
  case opt
  when '--force', '-f'
    @force = true
  when '--help'
    usage
  end
end

#-------------------------------------------------------------------------------
require 'rubygems' 
require 'colored'
require File.dirname(__FILE__) + '/../lib/getch'

#---------------------------------------------------------------------------------------------------

files_with_changes_about_to_be_lost=`git ls-files-by-status -M`.chomp
if files_with_changes_about_to_be_lost.any? and !@force
  puts "Halt! You have uncommitted modifications to the following files. If you continue, these changes will be lost permanently!".red
  puts files_with_changes_about_to_be_lost.magenta
  exit unless (puts "Do you want to continue? (y/N) ".red; STDIN.getch(:case_insensitive => true) == 'y')
else
  system %(git-reset --hard #{ARGV.join(' ')})
end
