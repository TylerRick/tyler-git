#!/usr/bin/env bash

set -euo pipefail

usage() {
  cat - <<End >&2
Usage: $(basename "$0") [<file>]

Shows the status of where you are in the middle of a merge
End
  exit
}

#════════════════════════════════════════════════════════════════════════════════════════════════════
# TODO: Ideas

#Add a --conflicts option to show conflict hunks
#If in a conflict state and file has unresolved markers:
#grep -C 3 -E '<<<<<<<|=======|>>>>>>>' "$file"
#
#Add a --diff option to open 3-way diff in meld, vimdiff, or whatever is preferred.
#
#Add a --diff option to show 2-way diff view between versions
#git diff $merge_base $head -- $file   # BASE → LOCAL
#git diff $merge_base $merge_head -- $file   # BASE → REMOTE
#or with pager:
#git diff --color --word-diff $merge_base $head -- $file | less -R

#════════════════════════════════════════════════════════════════════════════════════════════════════

while [[ $# -gt 0 ]]; do
  case "$1" in
    --help | -h)      usage;;
    -*)               echo "Unknown option $1" >&2; exit 1 ;;
    *) break ;;
  esac
done

file=${1-}

#════════════════════════════════════════════════════════════════════════════════════════════════════

merge_msg=$(cat .git/MERGE_MSG)

if git rev-parse --quiet --verify MERGE_HEAD; then
  # or: merge_head=$(cat .git/MERGE_HEAD)
  merge_head=$(git rev-parse --short MERGE_HEAD)
  merge_head_name=$(git name-rev-prefer-branch $merge_head)

  merge_base=$(git merge-base HEAD MERGE_HEAD)
  merge_base=$(git rev-parse --short $merge_base)
  merge_base_name=$(git name-rev-prefer-branch $merge_base)
fi

head=$(git rev-parse --short HEAD)
head_name=$(git name-rev-prefer-branch $head)

#════════════════════════════════════════════════════════════════════════════════════════════════════
show_file_at() {
  if [ -z "$file" ]; then return; fi
  ref=$1
  echo
  echo "───────── $file @ $ref ─────────"
  if git cat-file -e "$ref:$file"; then
    git show "$ref:$file"
  else
    echo "(File not present at $ref)"
  fi
  echo "────────────────────────────────"
}

#════════════════════════════════════════════════════════════════════════════════════════════════════

echo "Merge message: $merge_msg"
echo

if [ -n "${merge_head-}" ]; then
  echo "Merging $merge_head_name ($merge_head) into $head_name ($head):"
  echo '════════════════════════════════════════════════════════════════════════════════════════════════════'
  echo "Merging $merge_head_name ($merge_head) (MERGE_HEAD / REMOTE):"
  git log-oneline-graph -n5 $merge_head
  show_file_at $merge_head_name
  echo
  echo '════════════════════════════════════════════════════════════════════════════════════════════════════'
  echo "→ into $head_name ($head) (HEAD / LOCAL):"
  git log-oneline-graph -n5 $head
  show_file_at $head_name
  echo
  echo '════════════════════════════════════════════════════════════════════════════════════════════════════'
  echo "⤙ with common ancestor $merge_base_name ($merge_base) (MERGE_BASE / BASE):"
  git log-oneline-graph -n5 $merge_base
  show_file_at $merge_base
fi

set -x
git diff --cc | head -n10
