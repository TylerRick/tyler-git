#! /bin/bash

# TODO: add option to prompt user if the commit looks good before starting the grbi
# it would just do a glp -1 and if they want to continue or abort
# usefel because sometimes you've staged only parts (chunks) and then you want to make sure it
# includes only those commits even though you're passing a filename to git-commit-fixup-rebase (git
# commit would commit only the passed paths).
# I suppose that's what
#   git diff --find-renames --find-copies --staged
# is for, but this would help you be absolutely sure that your commit contains what you think it
# contains before you squash into another commit and make it impossible to separate out again and
# see what you're changing now.
# is it more like rm --interactive or --verbose?

# TODO: Warn if any rebase would cause it to diverge from upstream (that is, warn if you rewrite any
# history/commits prior to the tip of the branch's upstream)

# TODO: Add --squash option like git-commit has (also --fixup to be complete?)

usage() {
  cat - <<End >&2
Usage:
  $(basename "$0") <commit> [file...]

git commit --amend can _only_ be used to amend the HEAD commit. What if you need to amend a commit
further back in your branch's history, some ancestor of HEAD?

This command lets you "git commit --amend" a _past_ commit by making a temporary commit and then
doing a "fixup" onto the commit you want to amend, using git rebase -i.

If you've already staged the changes/files/hunks you wish to commit, you can omit passing any
files.

In place of <commit>, you can pass a "file-relative commit ref" in addition to the usual commitish
formats (documented by man git-rev-parse under SPECIFYING REVISIONS):

  file~0 or file@ ? means most recent commit that changed file
  file~1 or file^ means the 2nd commit back looking only at commits that changed file

To do:
- Use GIT_SEQUENCE_EDITOR=git-rebase-seq-amend-past-commit by default?
- Alias as git-commit-amend-past-commit so that's similarity to git-commit-amend is more obvious for
  someone looking for a way to amend a commit, but then maybe realizing that normal amend can _only_
  be used on HEAD commit.
End
  exit
}

if [ -z "$1" ]; then
  usage
fi

# https://medium.com/@Drew_Stokes/bash-argument-parsing-54f3b81a6a8f
positional_args=""
# pass_through_opts is split between commit_opts and rebase_opts (the default) 
commit_opts=""
rebase_opts=""
squash_or_fixup="--fixup"
while (( "$#" )); do
  case "$1" in
    --squash)
      squash_or_fixup="--squash"
      shift
      ;;
    -n)
      commit_opts="${commit_opts} $1"
      shift
      ;;
    -*|--*=) # unknown opts
      rebase_opts="${rebase_opts} $1"
      shift
      ;;
    *) # preserve positional arguments
      positional_args="$positional_args $1"
      shift
      ;;
  esac
done
eval set -- "$positional_args"

commit=$1; shift

# TODO: Add a way to configure defaults (env? a file?) and/or a way to override this with a --no-committer-date-is-author-date
# This is something I would use if I'm cleaning up commits from months/years ago, but not if I'm
# doing a rebase of recent commits.
# Be warned that: This option implies --force-rebase. So it will create new commits for every single
# commit in your list, which is often not what I want (often I like to be able to repeat rebase
# using the same "base" commit and have it not actually modify that base commit). Unfortunately, it
# doesn't skip this modification if no change is needed (if the commit date and author date already
# match.)
# As a workaround to deal with an each-time-changing base commit id, you can just keep searching for
# the equivalent replacement commit, like:
#   gcifrb $(git common-ancestor main $(git find-equivalent-commit 838fb0195e))
if [ -n "$commit_date_is_author_date" ]; then
  echo 'Adding --committer-date-is-author-date'
  rebase_opts="${rebase_opts} --committer-date-is-author-date"
fi

#═══════════════════════════════════════════════════════════════════════════════════════════════════
if (( ${#commit} <= 3 )); then
  # TODO: use file-relative commit refs described above instead of position args
  echo "Treating $commit as number of commits back to go"
  commit=$(git-n-commits-ago $commit "$@")

  # Don't pass file name to git commit because that will cause the whole file to be committed, which
  # may not be what you want if you've already staged portions of files (with git add -p, for
  # instance).
  # Can we do the same in the else case? In the else case, they don't even need to pass the file to
  # this command if everything is already staged. It's only this case where the path is needed for
  # other reasons (to pass on to git-n-commits-ago). That's the reason for this inconsistency,
  # though I wish I knew of a better solution. Maybe a more explicit -n path:1 instead of passing as
  # positional arg?
  git commit $commit_opts $squash_or_fixup $commit
else
  commit=$(git-ensure-commit-is-ancestor $commit || exit 1)
  git commit $commit_opts $squash_or_fixup $commit "$@"
fi

#grbi $commit
# Automate it and tell it to do the "f" command. Otherwise would require user
# to move the line up to right below the target commit and change pick to f.
# Possible solution: --autosquash

git merge-base --is-ancestor $commit HEAD || {
  echo "Warning: $commit is not an ancestor of current head."
}

# Used to hard code --autosquash here, but now I recommend doing this instead, and then the user is
# in control of whether or not to use this option:
#   git config --global rebase.autoSquash true
# or just pass --autosquash  directly to this command and it will pass it through here.
# TODO: Now I'm feeling again like --autosquash should be the default, so that this does what it
# says it will do "out of the box". Maybe add a --no-autosquash if you specifically want to disable
# this? And maybe the default of --autosquash should only be used if rebase.autoSquash is unset or
# true, but disabled if set to false?
# TODO: Should the -i should be the default, or only if -i is passed to this command? -i may not be
# necessary to accomplish the goal of this command, but is often nice to have because it gives you a
# previous of what it's about to do.
git rebase ${rebase_opts} -i $commit^
