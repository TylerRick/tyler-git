# Idea:
# Usually it is when I am writing the commit message for a commit that I realize/decide that I want to squash/move a commit.
# So I often will include a (temporary) note/flag in my commit message like 'squash' or 'squash with commit 3 commits ago' (meaning, move up 3 lines and squash)
# or 'tip' (meaning move to bottom so that it becomes the tip even if it is not the tip when I do the rebase)
# So it would be nice if rebase interactive could notice those flags and automatically apply them.
# Status: mostly unneeded now and superseded by git commit --fixup/--squash and git-commit-fixup-rebase 


# when editing the list of commits, all it gives you is line1 from commit
# that's why it would be better to work with git-log-menu (which can give you full diff/commit-message on request) and initiate a squash/delete/etc. from there instead


# keep a log of all grbi activity , so that you can use it for a post-mortem / to help recover lost commits / etc. if something goes wrong
# similar in concept to git-ref-log
# it would basically save a before and after snapshot: the original contents of the commit list that pops up in an editor, and then save your modified version


# so it should check to see if you're on a tracking branch and, 
# if so:
#   check if commit has already been pushed to remote
#   if so:
#     abort, as it's too late to try to amend/delete that commit
#   if not:
#     ask them if they want to do a git-forgot-to-switch-to-dev-branch so that they can rebase against the current branch
#     better yet, make it reliable enough that we don't even have to ask them: just create a temporary branch, rewind previous branch, and rebase against it
#
#
#
# 2020-11-11 12:52
# Wrapper or editor extension (!) for a better git rebase -i
# The editor (vim, VS code) extension would give you helpful feedback/info while editing .git/rebase-merge/git-rebase-todo
# When reordering/adding/removing commits, it will check to see if this change
# - will definitely (such as if you both delete/move and modify a file),
# - could possibly (changed same file, but possibly parts of thefile that were far enough part),
# -  or could never cause a merge conflict (changed completely not overlapping sets of files).
# It does this by checking the list of files modified (deleted, etc.) for all commits involved in
# the change.
# It then highlights (and/or adds info to the text following the commit ref, since it can be any text) commit lines that won't conflict in green, may conflict in yellow, and _will_ conflict in red.
# It could even get smarter and do a trial run of your steps in the background
# (in a copy repo, possibly) to remove the "may conflict" altogether, and instead
# tell you _definitively_ if it will or not, and if so, the type (delete +
# modified, both modified, etc.) and how bad the conflict it is (maybe just the
# sum of number of lines in each conflict block)
# Ex.: git-rebase-interactive-wrapper.example_1.txt




# When you're rebasing your branch onto another "upstream" branch, and either of them have rewritten commits that are part of their common "merge base" tree, then it will list those "duplicate"/modified commits (from your current branch that you're rebasing, even if it still has the *original* version of that modified commit), it will include it with all the other "pick" commits as if it's a new commit from your branch (even though it's not new) and it will be easy to not notice these "duplicate" commits that snuck in with your *real* new commits.
#   pick 6770ecc3f rails webpacker:install:typescript
#   pick 4326187cd Add back some things to tsconfig.json
# Which of these are new and which are dups?
# Well, this tool can help automatically identify the possible dups, *and* give you enough info to help you decide which version of the duplicate commit is the one you want to commit.
# (Hopefully you want to keep the "upstream" version, and then you would just delete the "pick" command for the "original" version of the commit).
# In the command list, it might highlight the possible duplicate commit in yellow.
# It could even change the "pick" to a "drop" if the other/onto branch had the newer version of this commit. (But still highlight it in yellow so you could manually review the suggested action.)
# and then if you want/need additional info, you could just press a key to get additional output.
#
# The additional output might look like:
#âŸ« ref=6770ecc3f; git-diff-commits $ref $(git-find-equivalent-commit $ref master 2>/dev/null)
#commit 6770ecc3f97f0ba04683bda4397be1b23da0b516
#Author:     Tyler Rick <tyler@k3.is>
#AuthorDate: 2020-09-02 14:51:47 -0700
#Commit:     Tyler Rick <tyler@k3.is>
#CommitDate: 2020-09-03 10:19:55 -0700
#
#    rails webpacker:install:typescript
#commit 850fe5b452ef5fd52cd3029cb7287cb81ec415e1
#Author:     Tyler Rick <tyler@k3.is>
#AuthorDate: 2020-09-02 14:51:47 -0700
#Commit:     Tyler Rick <tyler@k3.is>
#CommitDate: 2020-11-13 12:27:52 -0800
#
#    rails webpacker:install:typescript
#1c1
#< commit 6770ecc3f97f0ba04683bda4397be1b23da0b516
#---
#> commit 850fe5b452ef5fd52cd3029cb7287cb81ec415e1
#95c95
#< index bfb9ee5c9..bd034ff63 100644
#---
#> index 77fe7a64a..6b7bbc276 100644
#127c127
#<      "vendor",
#---
#>      "node_modules.*",
#
# From this you would see the later commit date and most likely decide to keep the newer-commited commit.
